{
  
    
        "post0": {
            "title": "If Else Statements and Boolean Logic",
            "content": "Booleans . Booleans are one of the primitive data types that Java supports and are an integral data type to all of computer science. In fact, it&#39;s the idea of booleans that actually makes up an integral part of computers which we know as 0s and 1s (on or off) which in computer speak is called binary. . Established by 19th century mathematician George Bool, booleans are at its core data for logic simply put in two types: true or false. With this you can create a complex structure of computing code and all other manners of code. . Let&#39;s see how they are when we assign them as variables! . boolean a = true; boolean b = false; System.out.println(&quot;variable a: &quot; + a + &quot; nvariable b: &quot; + b); . variable a: true variable b: false . Boolean Operators . Booleans, interestingly enough, have operators to them just as math does. The most common operators you&#39;ll hear about are the comparison operators: and (&amp;&amp;), or (||), &gt;, &lt;, &gt;=, &lt;=, ==. Another common operator is not (!). . The and operator compares two boolean statements and if both are true, then it will return true, otherwise all other combinations of the boolean statements return false. . The or operator also compares two boolean statements and if one of them is true, it returns true while if both of them is false, it will return false. . The not operator is applied to a boolean statement and switches true to false and false to true. . Let&#39;s see them in action! . // examples of some of the operators boolean a = true &amp;&amp; true; boolean b = false &amp;&amp; true; boolean c = 100 &lt; 150; boolean d = 20 &gt;= 1; boolean e = !b; boolean f = false || true; System.out.println(&quot;variable a: &quot; + a + &quot; nvariable b: &quot; + b + &quot; nvariable c: &quot; + c + &quot; nvariable d: &quot; + d + &quot; nvariable e: &quot; + e + &quot; nvariable f: &quot; + f); . variable a: true variable b: false variable c: true variable d: true variable e: true variable f: true . If and Else Statements . If statements are, at their core, statements that check the conditions of true or false. If a condition is true, it will perform an action/line of code, if it is false, it will skip over the action/code block under the if statement. . An Else statements is an action/code block that performs if the condition for the if statement is not true. . An Else If statement is a combination of If and Else statements where if a condition is not true, it will move into the else statement which has another if statement. At its core. it is a nested If Else statement. . Let&#39;s see them in action. . int a = 11; int b = 6; int c = 9; if (a &gt; b){ //since a is greater than c, the else statement is ignored if (a &lt; c){ System.out.println(&quot;c is the largest number&quot;); } else{ //since a is greater than c, the else statement&#39;s code block is called because the if statement is false System.out.println(&quot;a is the largest number&quot;); } } else{ if (b &lt; c){ System.out.println(&quot;c is the largest number&quot;); } else{ System.out.println(&quot;b is the largest number&quot;); } } . a is the largest number . Switch Case Statements . Switch Case Statements help simplify/manage the complexity of if else statements which can in many circumstance become overly long especially when comparing by a case by case basis. . It works by stating a variety of Case statements which all have conditions. The code blocks under each case are then run if the condition to one of the cases is met. Just like if else statements, Switch Case statements will go down each case to see if a conditon is met. If it is met, the case&#39;s block of code will run and ignore the rest of the Switch Case statements. . In the examples below, the first will be a chain of If Else statements while the second example will use switch case to demonstrate how Switch Case statements simplify multiple If Else statements. . int n = 7; if (n == 4){ System.out.println(&quot;4 is considered unlucky in Japan because of its pronounciation&#39;s (shi) similarity to the word for death.&quot;); } else if (n == 7){ System.out.println(&quot;7 is considered lucky in many cultures because its believed to be associated with its propagation as a positive value in folklores and myths.&quot;); } else if (n == 8){ System.out.println(&quot;8 is considered a lucky number in China and Japan because of its relation to the word for prosperity in their cultures.&quot;); } else if (n == 9){ System.out.println(&quot;9 is considered unlucky in both China and Japan because both associate it with the word for sorrow, grief, and suffering.&quot;); } else if (n == 13){ System.out.println(&quot;13 is considered unlucky in Western society due to its association with the Christian Bible where the 13th to sit at the Last Supper was Judas who is known as the betrayer of Jesus Christ.&quot;); } . 7 is considered lucky in many cultures because its believed to be associated with its propagation as a positive value in folklores and myths. . int n = 7; String output; switch (n){ //variable passed in case 4: //condition checked if equals output = &quot;4 is considered unlucky in Japan because of its pronounciation&#39;s (shi) similarity to the word for death.&quot;; break; case 7: output = &quot;7 is considered lucky in many cultures because its believed to be associated with its propagation as a positive value in folklores and myths.&quot;; break; case 8: output = &quot;8 is considered a lucky number in China and Japan because of its relation to the word for prosperity in their cultures.&quot;; break; case 9: output = &quot;9 is considered unlucky in both China and Japan because both associate it with the word for sorrow, grief, and suffering.&quot;; break; case 13: output = &quot;13 is considered unlucky in Western society due to its association with the Christian Bible where the 13th to sit at the Last Supper was Judas who is known as the betrayer of Jesus Christ.&quot;; break; } System.out.println(output); . 7 is considered lucky in many cultures because its believed to be associated with its propagation as a positive value in folklores and myths. . De Morgan&#39;s Law . De Morgan&#39;s Law states that in a boolean statement, the not operator ! will reverse all the operators in that statement. For instance, true becomes false, false becomes true, and becomes or, or becomes and, &gt; becomes &lt;=, &lt;= becomes &gt;, etc. A tangible example of this is &#39;I will not drink water and eat a table&#39; which means the same thing as &#39;I will either not drink water or eat a table.&#39; . Here&#39;s some examples! . boolean a = true; boolean b = true; . if (!(A &amp;&amp; B)){ System.out.println(&quot;A and B both are false&quot;); } else{ System.out.println(&quot;A and B are true&quot;); } . A and B are true . if (!A || !B){ System.out.println(&quot;A and B both are false&quot;); } else{ System.out.println(&quot;A and B are true&quot;); } . A and B are true . As shown above, both statements are equal given De Morgan&#39;s Law. It&#39;s important because of how they can break inversions as a complement of a complex boolean expression. .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/pbl/2022/09/12/boolean.html",
            "relUrl": "/pbl/2022/09/12/boolean.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Focus / Habits",
            "content": "Interests and Skills . Week Accomplishments : AWS server completion, watched Yale Video and reflected, completed lesson on booleans Goals : Try to finish everything before the weekend because I have vacation and will not be able to complete other than during the week . Interests: CS (Likely front end, or game development), Biomed, Nursing ( Anesthesiology, or smthn else ) . Skills: CS - Python, CSS, Java (beginner), JavaScript Biomed - Concussion certification, know most muscles and bones, can identify certain tumors Nursing - I have parents that are good at it . Yale Video . Laurie Santos’s speach on her new course in Yale Psychology and the Good Life talks about a lot of the mental struggles and stress that students both in college and even in high school, middle schools, and elementary schools face as a result of the pressures of placed upon them by themselves, their parents, their teachers, and even society’s norms and expectations. . Here at Del Norte, almost all of the teacher I know complain in one form or another that student culture is very pushy towards taking APs and high level academic classes. Lot’s of times, just as Santos surveyed, I find that I, and many of my other peers, struggle to actually effectively learn other arguably more important skills and overly burden ourselves. This comes in the form of practical struggles which we’ll face in our adulthood such as independence, communication, and mental coping. In turn, we also over look many of the arguably more happier and fulfilling aspects of our lives. . In my opinion, much of this stress in high school is the result of expectations of going to college. Look at Europe for instance, although it’s cliche to compare American and European institutions, it is undeniable that most European students are relatively far more laxed in getting into university and studying in university. The rigor and academic load is still relatively the same but most of the students find themselves far less pressured than their American counterparts. . To achieve and recognize some of this happiness, learning and applying the methods to make one happy is essential. Letting go of some excessive or unnecessary expectations can often go a long way towards seeing the fulfilling aspects of our lives. . Among some really important practices she lists are: adequate sleep, time to appreciate and acknowledge gratitude (both self and outside), meditation, exercise, breaks. All of these are practices that can go a long way towards creating a healthier and ultimately more fulfilling life. . There’s definitely a lot more especially her insights regarding her course material and how to live fulfilling lives but I think that can be something I blog another time and watch in my own time to let sink in. . Goals in coding . Applying the mindset that Santos’s speach sort of brings to light, I think as I code, I definitely want to keep in mind that I shouldn’t be coding for the sake of a grade but rather I should be coding to develop my interest within the field and seeing its applications as a powerful tool in my life and society. The most important goal I have is being able to use CSA as a way not only to learn AP CSA material for the AP Exam, but also the best practices of coding, how to become a good programmer, and developing my creativity as one. This especially ties into the Alumni panel, where even if I don’t go into a CS related major, it will still be in good interest to do good in this class. .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/keytakeaways/2022/09/11/personal.html",
            "relUrl": "/keytakeaways/2022/09/11/personal.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "PBL Progress 1",
            "content": "Our Progress . Woooo so far we’ve created only a basic calculator but we’re hoping to expand upon that when we can. So far we have two versions of a basic calculator, each with its own limitations. . Desktop Application Calculator (Krish and Nicky) . &lt;img width=“495” alt=“image” src=“https://user-images.githubusercontent.com/75715248/188583403-d22f1fd1-2c42-4cca-b27b-a6dd0ec2da03.png”&gt; Krish and Nicky worked together to set up a Desktop GUI that implemented a calculator using JFrame and Springboot. At its core, it simply takes two numbers which the user inputs and a function that the user specifies to perform a mathematical operation and output the value. Some limitations include: a lack of practical usability as a UI, limits to only two numbers being computed at a time, only one operator/function being able to be used at a time. Some pros include: a clean GUI that is accurate and does not need to interface with Spring’s web application programs, can perform relatively complex mathematical operations due to its ease of accessibility to Java’s math library. Some improvements: preferably a better GUI that gives the user a better range of options, maybe more operations, performing multiple operations at a time . Web Browser Application (Don and Nathan) . &lt;img width=“1440” alt=“image” src=“https://user-images.githubusercontent.com/75715248/188583668-d4d07a5f-70f1-46bc-9a99-e211d673e2e6.png”&gt; Don and Nathan worked together to set up a Web Browser Application that works as a very basic calculator that takes a string as an input. It then performs the operations it sees in the string on each of the values. It uses Spring Boot and MVC to interface the html output with the actual logic Some limitations include: a disregard for order of operations, very specific syntax has to be used most of the time or else it wont output at all or will output what the user outputted, its limited only to the four basic operations, the GUI only has a string user input and an = sign button that functions. Some pros include: it can perform multiple operations at a time, has a functioning GUI that is clean, runs on a web browser, is easy to visualize Some improvements include: Creating functioning buttons in its GUI, accounting for order of operations (likely to try to use tree data structure in order to implement this), more operators and functions . Future Work . To make a well made calculator and preferably to expand it as a tool to help with math problems, we’re likely to move towards the web development side of Spring Boot. It’s tools provide a relatively straightforward method to putting our java programs onto a web browser through its boiler plate code and hopefully that should enable us to focus mainly on the functionality of our web. Through this, we learned how to use JFRame and also understand how Spring Boot uses MVC to build a webpage using mostly HTML and Java files. .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/pbl/2022/09/06/group.html",
            "relUrl": "/pbl/2022/09/06/group.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Innovation - Objects",
            "content": "Code.org . Link to Code.org Proof . Java Objects . Link to Objects Notebook . Extra . Collaborative Issue | Worked with Don on Spring Calculator | Worked on HTML portion of html | .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/keytakeaways/2022/09/05/objects.html",
            "relUrl": "/keytakeaways/2022/09/05/objects.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Objects Notebook",
            "content": "// imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // CLASS DEFINED // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object ( INSTANCE ) this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Say Hello&quot;); System.out.println(&quot;2 - Output colors&quot;); System.out.println(&quot;3 - Loading in color&quot;); System.out.println(&quot;4 - Salary Calculator&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } private void salaryCalculator(){ Scanner myObj = new Scanner(System.in); // Create a Scanner object ( INSTANCE ) System.out.println(&quot;Enter a salary between 0-1,000,000&quot;); // Number 1, gets salary double salary = myObj.nextDouble(); // Read user input System.out.println(salary); double oldSalary = salary; // records oldsalary for percent calculation later System.out.println(&quot;Enter your pay raise&quot;); // Number 2, gets raise to salary double raise = myObj.nextDouble(); // Read user input System.out.println(raise); salary += raise; // the inputted number of &quot;raise&quot; is added onto the original inputted &quot;salary&quot; int randomnum = (int)(Math.random() * 100); // use of math.random() salary += randomnum; // use of math.random to add random number into salary value int percent = (int) (100*(salary / oldSalary)-100); // calculates percent raise myObj.close(); // closing object, stops reading text inputs boolean payraisequality; // defines boolean variable String message; // defines message if(percent &gt; 5){ payraisequality = true; } else{ payraisequality = false; } if (payraisequality == true){ message = &quot;You got a good pay raise!&quot;; } else{ message = &quot;You got a bad pay raise.&quot;; } System.out.println(&quot;Your final salary, with an added random number, is: &quot; + salary + &quot;, which is around a &quot; + percent + &quot;% raise from your original salary. &quot; + message); // Output user input } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.print(&quot;Hello, World!&quot;); break; case 2: for(int i = 0; i &lt; COLORS.length; i++) // loop through COLORS array System.out.print(COLORS[i][ANSI] + COLORS[i][NAME]); break; case 3: System.out.print(&quot;Loading...&quot;); for (int i = 0; i &lt; 20; i++) { // fixed length loading bar int random = (int) (Math.random() * COLORS.length); // random logic (CHANGING FROM A DOUBLE TO AN INTEGER) try { Thread.sleep(100); // delay for loading } catch (Exception e) { System.out.println(e); } System.out.print(COLORS[random][ANSI] + &quot;#&quot;); } break; case 4: salaryCalculator(); // (METHOD) break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object (METHOD) } } Menu.main(null); . - Choose from these choices - 1 - Say Hello 2 - Output colors 3 - Loading in color 4 - Salary Calculator 0 - Quit - 4: Enter a salary between 0-1,000,000 100.0 Enter your pay raise 2000.0 Your final salary, with an added random number, is: 2176.0, which is around a 2076% raise from your original salary. You got a good pay raise! 0: Goodbye, World! . College Board and CTE competences . Explain where a Class is defined . &quot;public class Menu{ &quot; | . Explain where an instances of a Class is defined . &quot;Scanner sc = new Scanner(System.in);&quot; | &quot;Scanner myObj = new Scanner(System.in);&quot; | . Explain where an object is Calling a Method . &quot;new Menu();&quot; | . Explain where an object is Mutating data . &quot;(CHANGING FROM A DOUBLE TO AN INTEGER)&quot; | .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/codecodecode/2022/09/05/menu.html",
            "relUrl": "/codecodecode/2022/09/05/menu.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Code.org Proof",
            "content": "Proof of Code.org . Link to code Segments + Explanations . .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/keytakeaways/2022/09/05/codeorg.html",
            "relUrl": "/keytakeaways/2022/09/05/codeorg.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "TEST PBL",
            "content": "PBL Features . Filler | .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/pbl/2022/08/29/testpbl.html",
            "relUrl": "/pbl/2022/08/29/testpbl.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "TEST Collegeboard Notes",
            "content": "Notes . Filler | .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/collegeboard/2022/08/29/testnotes.html",
            "relUrl": "/collegeboard/2022/08/29/testnotes.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "PBL",
            "content": "PBL Features . PBL Test | .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/pbl/2022/08/29/pbl.html",
            "relUrl": "/pbl/2022/08/29/pbl.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Collegeboard Notes",
            "content": "Collegeboard Unit Notes . Notes Test | .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/collegeboard/2022/08/29/collegeboard.html",
            "relUrl": "/collegeboard/2022/08/29/collegeboard.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Bash Notebook",
            "content": "Checking if Java and Anaconda are installed . echo &quot;Lets check if Java is installed&quot; java --version echo &quot;&quot; echo &quot;Lets check if Annaconda is installed&quot; conda list . Lets check if Java is installed java 18.0.2.1 2022-08-18 Java(TM) SE Runtime Environment (build 18.0.2.1+1-1) Java HotSpot(TM) 64-Bit Server VM (build 18.0.2.1+1-1, mixed mode, sharing) Lets check if Annaconda is installed # packages in environment at /Users/nathanmanangan/opt/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39hecd8cb5_1 aiohttp 3.8.1 py39hca72f7f_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39hecd8cb5_0 anaconda-navigator 2.1.4 py39hecd8cb5_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39hecd8cb5_0 appdirs 1.4.4 pyhd3eb1b0_0 applaunchservices 0.2.1 pyhd3eb1b0_0 appnope 0.1.2 py39hecd8cb5_1001 appscript 1.1.2 py39h9ed2024_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39hca72f7f_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39hecd8cb5_0 astropy 5.0.4 py39h67323c0_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39h9ed2024_0 beautifulsoup4 4.11.1 py39hecd8cb5_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39hca72f7f_0 bkcharts 0.2 py39hecd8cb5_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h2842e9f_0 bokeh 2.4.2 py39hecd8cb5_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39h67323c0_0 brotli 1.0.9 hb1e8313_2 brotlipy 0.7.0 py39h9ed2024_1003 brunsli 0.1 h23ab428_0 bzip2 1.0.8 h1de35cc_0 c-ares 1.18.1 hca72f7f_0 ca-certificates 2022.3.29 hecd8cb5_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39hecd8cb5_2 cffi 1.15.0 py39hc55c11b_1 cfitsio 3.470 hee0f690_6 chardet 4.0.0 py39hecd8cb5_1003 charls 2.2.0 h23ab428_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39hecd8cb5_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39hecd8cb5_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39hecd8cb5_0 conda-build 3.21.8 py39hecd8cb5_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39hca72f7f_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39h2fd3fbb_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 hca72f7f_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39he9d5cce_0 cytoolz 0.11.0 py39h9ed2024_0 daal4py 2021.5.0 py39h24a4e90_0 dal 2021.5.0 hecd8cb5_782 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39hecd8cb5_1 debugpy 1.5.1 py39he9d5cce_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39hecd8cb5_1 entrypoints 0.4 py39hecd8cb5_0 et_xmlfile 1.1.0 py39hecd8cb5_0 executing 0.8.3 pyhd3eb1b0_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 hd8bbffd_0 frozenlist 1.2.0 py39hca72f7f_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39hecd8cb5_1 gensim 4.1.2 py39he9d5cce_0 giflib 5.2.1 haf1e3a3_0 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h23ab428_2 gmpy2 2.1.2 py39hd5de756_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h9ed2024_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39hecd8cb5_0 greenlet 1.1.1 py39h23ab428_0 grpcio 1.42.0 py39ha29bfda_0 h5py 3.6.0 py39h4a1dd59_0 hdf5 1.10.6 hdbbcd12_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 h0a44026_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39ha952a84_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39hecd8cb5_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39hecd8cb5_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 hecd8cb5_3538 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39hecd8cb5_0 ipython 8.2.0 py39hecd8cb5_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39hecd8cb5_1 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e hca72f7f_0 jq 1.6 h9ed2024_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39hecd8cb5_0 jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 haf1e3a3_2 keyring 23.4.0 py39hecd8cb5_0 kiwisolver 1.3.2 py39he9d5cce_0 krb5 1.19.2 hcd88c3b_0 lazy-object-proxy 1.6.0 py39h9ed2024_0 lcms2 2.12 hf1fd2bf_0 lerc 3.0 he9d5cce_0 libaec 1.0.4 hb1e8313_1 libarchive 3.4.2 haa3ed63_0 libcrc32c 1.1.1 hb1e8313_2 libcurl 7.82.0 h6dfd666_0 libcxx 12.0.0 h2f01273_0 libdeflate 1.8 h9ed2024_5 libedit 3.1.20210910 hca72f7f_0 libev 4.33 h9ed2024_1 libffi 3.3 hb1e8313_2 libgfortran 3.0.1 h93005f0_2 libiconv 1.16 hca72f7f_2 libidn2 2.3.2 h9ed2024_0 liblief 0.11.5 he9d5cce_1 libllvm11 11.1.0 h46f1229_1 libnghttp2 1.46.0 ha29bfda_0 libpng 1.6.37 ha441bb4_0 libprotobuf 3.19.1 h8346a28_0 libsodium 1.0.18 h1de35cc_0 libspatialindex 1.9.3 h23ab428_0 libssh2 1.10.0 h0a4fc7d_0 libtiff 4.2.0 h87d7836_0 libunistring 0.9.10 h9ed2024_0 libwebp 1.2.2 h56c3ce4_0 libwebp-base 1.2.2 hca72f7f_0 libxml2 2.9.12 hcdb78fc_0 libxslt 1.1.34 h83b36ba_0 libzopfli 1.0.3 hb1e8313_0 llvm-openmp 12.0.0 h0dcd299_1 llvmlite 0.38.0 py39h8346a28_0 locket 0.2.1 py39hecd8cb5_2 lxml 4.8.0 py39h65b224f_0 lz4-c 1.9.3 h23ab428_1 lzo 2.10 haf1e3a3_2 markdown 3.3.4 py39hecd8cb5_0 markupsafe 2.0.1 py39h9ed2024_0 matplotlib 3.5.1 py39hecd8cb5_1 matplotlib-base 3.5.1 py39hfb0c5b7_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39hecd8cb5_1 mistune 0.8.4 py39h9ed2024_1000 mkl 2021.4.0 hecd8cb5_637 mkl-service 2.4.0 py39h9ed2024_0 mkl_fft 1.3.1 py39h4ab4a9b_0 mkl_random 1.2.2 py39hb2f4e1b_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h6ef4df4_1 mpfr 4.0.2 h9066e36_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39hecd8cb5_0 msgpack-python 1.0.2 py39hf7b0b51_1 multidict 5.2.0 py39hca72f7f_2 multipledispatch 0.6.0 py39hecd8cb5_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39hecd8cb5_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39hecd8cb5_0 nbconvert 6.4.4 py39hecd8cb5_0 nbformat 5.3.0 py39hecd8cb5_0 ncurses 6.3 hca72f7f_2 nest-asyncio 1.5.5 py39hecd8cb5_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 10.13.0 h0a44026_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.12 pypi_0 pypi numba 0.55.1 py39hae1ba45_0 numexpr 2.8.1 py39h2e5f0a9_0 numpy 1.21.5 py39h2e5f0a9_1 numpy-base 1.21.5 py39h3b1a694_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h9ed2024_0 openjpeg 2.4.0 h66ea3da_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n hca72f7f_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39he9d5cce_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39hecd8cb5_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39hecd8cb5_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 pathspec 0.7.0 py_0 patsy 0.5.2 py39hecd8cb5_1 pep8 1.7.1 py39hecd8cb5_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39hde71d04_0 pip 21.2.4 py39hecd8cb5_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39hecd8cb5_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39he9d5cce_0 psutil 5.8.0 py39h9ed2024_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39he9d5cce_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h9ed2024_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39hecd8cb5_0 pycurl 7.44.1 py39hbcfaee0_1 pydispatcher 2.0.5 py39hecd8cb5_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h9ed2024_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39hecd8cb5_0 pylint 2.9.6 py39hecd8cb5_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39he9d5cce_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h23ab428_6 pyrsistent 0.18.0 py39hca72f7f_0 pysocks 1.7.1 py39hecd8cb5_0 pytables 3.6.1 py39h648f197_1 pytest 7.1.1 py39hecd8cb5_0 python 3.9.12 hdfd78df_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h23ab428_3 python.app 3 py39hca72f7f_0 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39hca72f7f_0 pyyaml 6.0 py39hca72f7f_1 pyzmq 22.3.0 py39he9d5cce_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h468cd18_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39hecd8cb5_0 readline 8.1.2 hca72f7f_1 regex 2022.3.15 py39hca72f7f_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39hecd8cb5_1 ruamel_yaml 0.15.100 py39h9ed2024_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39hae1ba45_0 scikit-learn 1.0.2 py39hae1ba45_1 scikit-learn-intelex 2021.5.0 py39hecd8cb5_0 scipy 1.7.3 py39h8c7af03_0 scrapy 2.6.1 py39hecd8cb5_0 seaborn 0.11.2 pyhd3eb1b0_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39hecd8cb5_0 sip 4.19.13 py39h23ab428_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 he9d5cce_0 sniffio 1.2.0 py39hecd8cb5_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39hecd8cb5_1 spyder-kernels 2.1.3 py39hecd8cb5_0 sqlalchemy 1.4.32 py39hca72f7f_0 sqlite 3.38.2 h707629a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39hca72f7f_0 sympy 1.10.1 py39hecd8cb5_0 tabulate 0.8.9 py39hecd8cb5_0 tbb 2021.5.0 haf03e11_0 tbb4py 2021.5.0 py39haf03e11_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39hecd8cb5_0 terminado 0.13.1 py39hecd8cb5_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h7bc2e8c_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h9ed2024_0 tqdm 4.64.0 py39hecd8cb5_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39hca72f7f_0 typed-ast 1.4.3 py39h9ed2024_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39he9d5cce_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 haf1e3a3_0 urllib3 1.26.9 py39hecd8cb5_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h999c104_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39hecd8cb5_1 websocket-client 0.58.0 py39hecd8cb5_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h6dfd666_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39hecd8cb5_0 wrapt 1.12.1 py39h9ed2024_1 wurlitzer 3.0.2 py39hecd8cb5_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xlwings 0.24.9 py39hecd8cb5_0 xz 5.2.5 h1de35cc_0 yaml 0.2.5 haf1e3a3_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h9ed2024_0 zeromq 4.3.4 h23ab428_0 zfp 0.5.5 he9d5cce_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h4dc903c_2 zope 1.0 py39hecd8cb5_1 zope.interface 5.4.0 py39h9ed2024_0 zstd 1.4.9 h322a384_0 . Updating a repository . export repository=CSA-FASTPAGES export repo_main_folder=vscode cd $HOME/$repo_main_folder/CSA-FASTPAGES git fetch origin git pull origin master . remote: Enumerating objects: 168, done. remote: Counting objects: 100% (168/168), done. remote: Compressing objects: 100% (53/53), done. remote: Total 168 (delta 70), reused 163 (delta 65), pack-reused 0 Receiving objects: 100% (168/168), 52.67 KiB | 1.10 MiB/s, done. Resolving deltas: 100% (70/70), completed with 11 local objects. From https://github.com/ProRichyMan/CSA-Fastpages 9f5e7f3..c0f83ef gh-pages -&gt; origin/gh-pages From https://github.com/ProRichyMan/CSA-Fastpages * branch master -&gt; FETCH_HEAD Already up to date. . Doing some Installations . Automizes some of the installations, specifically git, python, and java! . arch -arm64 brew list arch -arm64 brew update arch -arm64 brew upgrade arch -arm64 brew install git arch -arm64 brew install python python --version arch -arm64 brew install java java --version javac --version . ==&gt; Formulae ca-certificates git openssl@1.1 readline xz gdbm mpdecimal pcre2 spring-boot gettext openjdk python@3.10 sqlite Updated 1 tap (homebrew/core). ==&gt; New Formulae ghorg linux-headers@5.15 shaderc kalign pymol swiftdraw ==&gt; Outdated Formulae openjdk You have 1 outdated formula installed. You can upgrade it with brew upgrade or list it with brew outdated. ==&gt; Upgrading 1 outdated package: openjdk 18.0.2 -&gt; 18.0.2.1 ==&gt; Downloading https://ghcr.io/v2/homebrew/core/openjdk/manifests/18.0.2.1 ######################################################################## 100.0% ==&gt; Downloading https://ghcr.io/v2/homebrew/core/openjdk/blobs/sha256:373ac8b65d ==&gt; Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/sh ######################################################################## 100.0% ==&gt; Upgrading openjdk 18.0.2 -&gt; 18.0.2.1 ==&gt; Pouring openjdk--18.0.2.1.arm64_monterey.bottle.tar.gz ==&gt; Caveats For the system Java wrappers to find this JDK, symlink it with sudo ln -sfn /opt/homebrew/opt/openjdk/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk.jdk openjdk is keg-only, which means it was not symlinked into /opt/homebrew, because macOS provides similar software and installing this software in parallel can cause all kinds of trouble. If you need to have openjdk first in your PATH, run: echo &#39;export PATH=&#34;/opt/homebrew/opt/openjdk/bin:$PATH&#34;&#39; &gt;&gt; ~/.zshrc For compilers to find openjdk you may need to set: export CPPFLAGS=&#34;-I/opt/homebrew/opt/openjdk/include&#34; ==&gt; Summary 🍺 /opt/homebrew/Cellar/openjdk/18.0.2.1: 642 files, 309MB ==&gt; Running `brew cleanup openjdk`... Disable this behaviour by setting HOMEBREW_NO_INSTALL_CLEANUP. Hide these hints with HOMEBREW_NO_ENV_HINTS (see `man brew`). Removing: /opt/homebrew/Cellar/openjdk/18.0.2... (642 files, 309MB) Removing: /Users/nathanmanangan/Library/Caches/Homebrew/openjdk--18.0.2... (180.3MB) Warning: git 2.37.2 is already installed and up-to-date. To reinstall 2.37.2, run: brew reinstall git Warning: python@3.10 3.10.6_1 is already installed and up-to-date. To reinstall 3.10.6_1, run: brew reinstall python@3.10 Python 3.9.12 Warning: openjdk 18.0.2.1 is already installed and up-to-date. To reinstall 18.0.2.1, run: brew reinstall openjdk java 18.0.2.1 2022-08-18 Java(TM) SE Runtime Environment (build 18.0.2.1+1-1) Java HotSpot(TM) 64-Bit Server VM (build 18.0.2.1+1-1, mixed mode, sharing) javac 18.0.2.1 . java --version python --version javac --version node --version . java 18.0.2.1 2022-08-18 Java(TM) SE Runtime Environment (build 18.0.2.1+1-1) Java HotSpot(TM) 64-Bit Server VM (build 18.0.2.1+1-1, mixed mode, sharing) Python 3.9.12 javac 18.0.2.1 v10.13.0 . Shows all of the kernels installed for Jupyter . jupyter kernelspec list . Available kernels: python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e /Users/nathanmanangan/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e python3912jvsc74a57bd063f284042fb87dad5a12beb55d64e6088ab71ccd3f72ccdf84694aa4fa281d07 /Users/nathanmanangan/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3912jvsc74a57bd063f284042fb87dad5a12beb55d64e6088ab71ccd3f72ccdf84694aa4fa281d07 bash /Users/nathanmanangan/Library/Jupyter/kernels/bash java /Users/nathanmanangan/Library/Jupyter/kernels/java javascript /Users/nathanmanangan/Library/Jupyter/kernels/javascript python3 /Users/nathanmanangan/opt/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/keylearnings/2022/08/29/bash.html",
            "relUrl": "/keylearnings/2022/08/29/bash.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Alumni Panel",
            "content": "People Intros . Colin - UCSD, Took CSP twice, taking mechanical engineering | Anthony Vo - UC Irvine, Majoring CS | Andrew - Took intro to CS, then CSA | Maybel - UCSD, Cognitive science, took 2 tris | Allison - UCLA, took CSP | Nitya - UCSD, CS major, took CSA, machine learning | . Questions . How did you realize you wanted to do your major and how did taking AP CSA/CSP help with that? Took CSP and realized that he wasn’t as good at CSP as he was at mechanical engineering, comparing to competitors | Intro class got him hooked, he just enjoyed it and it was fun | Take time to reflect on what you want to do | Programming/Scripting is still helpful for careers/majors even if it isn’t Computer Science directly | CSP gave technical skills and abilities to help, and solving real world problems | . | What is the biggest challenge you’ve encountered with computer science? Starting sucks, but there’s a solution there | Make google doc and import to | Don’t compare yourself with others, and focus on your own path to ensure you can stay on track | Theory is hard to learn | Motivation was hard, make sure you don’t cut corners and make checkboxes for points | . | Are there any PBL scenarios in College computer science classes? Problem solve on an actual project, which you will need to do eventually | PBL has a lot of correlation in CS | . | How have you applied CS in your major if you are not majoring in CS? You can still use coding in another major, which is very helpful for convenience and calculations | Higher level math courses, CS helps | Jupyter Notebooks are good for technical papers, and it can be a useful skill | Psychology + CS, frontend a lot, which has a lot of stats and math courses requirements | . | For existing college students, have you had a job with school or professor? Talking with teachers to try to stand out and be able to excel | A lot of these classes, CSA is helpful for applying for internships and jobs | . | Open Questions? Personal projects are useful for something to show that you know what you’re doing | Make connections for referrals and internships and jobs | Internships are useful for handson experience | . | Reflection . When I first took CSP, I was mostly lost, and wasn’t sure exactly how to code other than my basic knowledge on scratch. Slowly making progress in the class by copying others, which was counter productive, got me by the first few weeks. However, I knew I was expected to do my own work eventually, especially since I knew that if I wanted to pursue a path into computer science then it would take work. I realized this through my final project in CSP, where I knew my project wasn’t exactly the greatest, and Mr. Mortensen allowed me to realize this, yet still took pity on me and gave me a good score. Over the summer, I took a few classes to help support my learnings in CSP, which I believed would hopefully benefit me in CSA. . | Through the Alumni’s advice, I was able to reflect on my current path in school in taking the CSA course, and my path into the future. My perspective of CSP-CSA pathway, was simply just going down that typical CS major pathway. However, a big takeaway I learned through the Alumni panel was how useful the knowledge and technical skills CS taught them, which can still be used in a variety of different majors/careers. Although I took CSP and currently in CSA, I’m still uncertain if I will take CS as my major into college, but I am sure that I will be able to use the skills I have learned in Comp Sci in my future path. These types of skills have proved to be plenty useful even for me, like skills of presenting work properly, computational thinking skills in real life scenarios, keeping organized (VERY VERY USEFUL), and even just coding. I also learned that reaching out and building connections is especially useful when looking at job opportunities and looking for internships. CSA is useful for for more STEM and CS related connections, but you can still branch out with other things, which is very useful down the line. . | .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/keylearnings/2022/08/29/alumnipanel.html",
            "relUrl": "/keylearnings/2022/08/29/alumnipanel.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Java Primitives Notebook",
            "content": "Define in a Class the following data types | Demonstrate use of Primitives: int, double, boolean, string | Demonstrate use of Wrapper Class object: String | Describe in comments how each data type choice is appropriate to application | Perform arithmetic expressions and assignment in a program code Code.org Lesson | Determine what is result is in a variable as a result of an data type and expression (ie integer vs double) | Perform an arithmetic expressions that uses casting, add comments that show how it produces desired result. Learn more by watching this College Board video | Perform compound assignment operator (ie +=), add comments to describe the result of operator | . Code below, Collaborated with Don Tran . import java.util.Scanner; public class Kitkatwrapper{ public static void main(String[] args) { Scanner myObj = new Scanner(System.in); // Create a Scanner object System.out.println(&quot;Enter a salary between 0-1,000,000&quot;); // Number 1, gets salary double salary = myObj.nextDouble(); // Read user input System.out.println(salary); double oldSalary = salary; // records oldsalary for percent calculation later System.out.println(&quot;Enter your pay raise&quot;); // Number 2, gets raise to salary double raise = myObj.nextDouble(); // Read user input System.out.println(raise); salary += raise; // the inputted number of &quot;raise&quot; is added onto the original inputted &quot;salary&quot; int percent = (int) (100*(salary / oldSalary)-100); // calculates percent raise myObj.close(); // closing object, stops reading text inputs boolean payraisequality; // defines boolean variable String message; // defines message if(percent &gt; 5){ payraisequality = true; } else{ payraisequality = false; } if (payraisequality == true){ message = &quot;You got a good pay raise!&quot;; } else{ message = &quot;You got a bad pay raise.&quot;; } System.out.println(&quot;Your final salary is: &quot; + salary + &quot;, which is around a &quot; + percent + &quot;% raise from your original salary. &quot; + message); // Output user input } } Kitkatwrapper.main(null); . Enter a salary between 0-1,000,000 123123.0 Enter your pay raise 123123.0 Your final salary is: 246246.0, which is around a 100% raise from your original salary. You got a good pay raise! .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/keylearnings/2022/08/22/javaclasses.html",
            "relUrl": "/keylearnings/2022/08/22/javaclasses.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "TT 1.0 Tools and Equipment",
            "content": "TT 1.0 Hacks . PART 1 LINKS: . Personal Fastpage . Markdown Page STILL NEED TO DO . Python Notebook . Java Notebook . . PART 2 LINKS : . Link to Commit . . Link to Issue .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/markdown/2022/08/21/markdownpg.html",
            "relUrl": "/markdown/2022/08/21/markdownpg.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Python Notebook",
            "content": "print(&quot;hello&quot;) . hello .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/codecodecode/2022/08/20/python.html",
            "relUrl": "/codecodecode/2022/08/20/python.html",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Java Notebook",
            "content": "System.out.println(&quot;Hello&quot;); int a = 3; int b = 10; double c = 2.5; c = 2 * a - 15 / b + c; System.out.println(c); . Hello 1.0 .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/codecodecode/2022/08/20/java.html",
            "relUrl": "/codecodecode/2022/08/20/java.html",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "WORKING!!!!!!! Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post17": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://prorichyman.github.io/CSA-Fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://prorichyman.github.io/CSA-Fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://prorichyman.github.io/CSA-Fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}