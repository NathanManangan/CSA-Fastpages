{
  
    
        "post0": {
            "title": "College Board Unit Review",
            "content": "Table of Scores . Unit Score Grading . Unit 1 | 1/1 | Link | . Unit 2 | 0.95/1 | Link | . Unit 3 | 0.9/1 | Link | . Unit 4 | 1/1 | Link | . Unit 5 | NONE | OUR OWN LESSON - NO SCORE? | . Unit 6 | NONE | UNKNOWN | . TOTAL SCORE | 3.85/4 | 2 Unknown ones | . Unit 1 Primitives . Casting (Division &amp; Rounding/Truncating) . int a = 10; int b = 3; // Examples of Casting // Casting in Division w/ casting (rounds down a/b in comparison to a more precise answer) System.out.println(a/b); System.out.println((double) a / b); // Casting to Round/Truncate double c = 3.5; System.out.println((int)(a + c)); . 3 3.3333333333333335 13 . Wrapper Classes . import java.util.ArrayList; // To initialize a Wrapper class as a variable, you instantiate just like any object Integer wrapperInteger = new Integer(10); System.out.println(wrapperInteger); // Some object only methods are shown below // toString() method System.out.println(&quot;This is a Wrapper Class: &quot; + wrapperInteger.toString()); // ArrayLists ArrayList&lt;Integer&gt; integers = new ArrayList&lt;Integer&gt;(); integers.add(wrapperInteger); System.out.println(integers); . 10 This is a Wrapper Class: 10 [10, 5] . Unit 2 Using Objects . Concatenation . String name = &quot;Nathan&quot;; Integer age = new Integer(17); System.out.println(&quot;My Name: &quot; + name); System.out.println(&quot;My Age: &quot; + age.toString()); . My Name: Don My Age: 17 . Math Class (Random) . // Floor Function System.out.println(Math.floor(10.999999999)); // Ceiling Function System.out.println(Math.ceil(10.999999999)); // Exponents System.out.println(Math.pow(10, 3)); // Logarithms in base 10 System.out.println(Math.log(2)); // Rounding System.out.println(Math.round(15.546432)); // Random (generates random number btwn 0 &amp; 1) System.out.println(Math.random()); . 10.0 11.0 1000.0 0.6931471805599453 16 0.7980473864210647 . Unit 3 Booleans, If/Else Statements, &amp; Comparison . Comparisons w/ Primitives (numbers, characters, booleans), Strings, &amp; Objects . int a = 0; int b = 0; int c = 1; // Comparing two same numbers System.out.println(a == b); // Comparing two different numbers System.out.println(a == c); String as = new String(&quot;yay&quot;); String bs = new String(&quot;cool&quot;); // Comparing the same string to itself (SAME memory location) System.out.println(as == as); // Comparing strings with same content using wrong operator (DIFFERENT memory location) System.out.println(as == bs); // Comparing strings with same content using correct .equals() System.out.println(as.equals(bs)); . true false true false false . Compound Boolean Expression . boolean a = true; boolean b = false; // Creating a compound expression boolean compound = !(a &amp;&amp; b) &amp;&amp; (b || a) &amp;&amp; (!b &amp;&amp; !a); // Printing the result System.out.println(compound); . false . De Morgan&#39;s Law . boolean a = true; boolean b = false; boolean c = true; boolean d = false; // complicated boolean expression boolean res1 = !((!(a &amp;&amp; b)) || (!(a || b))); // simplified using De Morgan&#39;s Law once boolean res2 = !((!a || !b) || (!a &amp;&amp; !b)); //simplified using De Morgan&#39;s Law twice boolean res3 = !(!a || !b) &amp;&amp; !(!a &amp;&amp; !b); // all results are the same System.out.println(res1 + &quot; &quot; + res2 + &quot; &quot; + res3); . false false false . Unit 4 Loops . For Loop &amp; Enhanced For Loop . // looping through even numbers for (int i = 0; i&lt;10; i+=2) { System.out.println(i); } int[] arr = {1, 2, 3, 7, 8}; // looping through array with conventional for lopo for (int i = 0; i&lt;arr.length; i++) { System.out.println(arr[i]); } // looping through array with enhanced for loop for (int i : arr) { System.out.println(i); } . While Loop &amp; Do While Loop . int i = 0; boolean falseBool = false; // printing even numbers with while loop while (i &lt; 10) { System.out.println(i); i += 2; } // if condition is false while loop does not run at all while (falseBool) { System.out.println(&quot;inside while loop&quot;); } // if condition is false in do while, the loop runs once do { System.out.println(&quot;inside do-while loop&quot;); } while (falseBool); . Nested Loops . int[][] arr = { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} }; // using nested for loops for 2D array for (int i = 0; i&lt;arr.length; i++) { for (int j = 0; j&lt;arr[i].length; j++) { System.out.print(arr[i][j] + &quot; &quot;); } System.out.println(); } . 1 2 3 4 5 6 7 8 9 . Unit 5 Classes (Own Lesson) . Static Methods &amp; Class Methods . Creating a Class . class SomeClass{ } . Main Method &amp; Tester Methods . class SomeClass { // main method (definition for main method, more on individual parts later) public static void main(String[] args){ System.out.println(&quot;cool main method&quot;); } } SomeClass.main(null); . cool main method . this Keyword . The &quot;this&quot; keyword allows you to access properties of the class. See constructor example to see use of this keyword. . Constructors . // creating a class (camel casing w/ first letter capitalized) class SomeClass { int someInt; String someString; // Constructor public SomeClass(int someInt, String someString){ // constructor passes in outside parameters if we want to initialize certain fields // this references objects own fields to differentiate (more on that later) this.someInt = someInt; this.someString = someString; } public static void main(String[] args){ SomeClass obj = new SomeClass(123, &quot;abc&quot;); System.out.println(obj.someInt); System.out.println(obj.someString); } } SomeClass.main(null); . 123 abc . Mutator Methods &amp; Setter Methods . These methods are used to get properties of an object from the outside the class definition. They are almost always necessary for private variables within classes. . Getters can be applied on only the properties which should be accessed outside the class. They always have a return type of whatever data field is being retrieved. . Setters are used to only set properties which are set outside the class. They are always void methods as their only purpose is to set variables. . class SomeClass { private int someInt; private String someString; public SomeClass(int someInt, String someString){ this.someInt = someInt; this.someString = someString; } // Getter method public int getSomeInt(){ return this.someInt; } public static void main(String[] args){ SomeClass obj = new SomeClass(123, &quot;abc&quot;); //Using Getter Method System.out.println(obj.getSomeInt()); } } SomeClass.main(null); . 123 . class SomeClass { private int someInt; private String someString; public SomeClass(int someInt, String someString){ this.someInt = someInt; this.someString = someString; } public int getSomeInt(){ return this.someInt; } // Setter public void setSomeInt(int newInt){ this.someInt = newInt; } public static void main(String[] args){ SomeClass obj = new SomeClass(123, &quot;abc&quot;); // Using setter method obj.setSomeInt(111); System.out.println(obj.getSomeInt()); } } SomeClass.main(null); . 111 . Unit 6 Arrays . What is an Array? Element -&gt; 1 value in an array Index -&gt; the position of the value in the array Declaring an array int[] array = new int[10]; Bound errors -&gt; accessing an element that does not exist Uninitialized and Unfilled arrays, assigning an array variable but not the whole array Traversing array, can use while but mainly for loop enhanced for loop .. for (int element:values) . public class ArrayMethods { private static int[] values = {1,2,3,4,5}; // Array public static void swap(){ System.out.println(&quot;0th Index = &quot; + values[0]); System.out.println(&quot;4th Index = &quot; + values[4]); int a = values[0]; int b = values[4]; values[0] = b; values[4] = a; System.out.println(&quot;0th Index = &quot; + values[0]); System.out.println(&quot;4th Index = &quot; + values[4]); } public static void replaceZero(){ for(int i = 0; i &lt; values.length; i++){ if(values[i] % 2 == 0){ values[i] = 0; } } for(int i : values){ System.out.print(i); } } } ArrayMethods.swap(); ArrayMethods.replaceZero(); .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/keylearnings/2022/12/22/cb-unit-review.html",
            "relUrl": "/keylearnings/2022/12/22/cb-unit-review.html",
            "date": " • Dec 22, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "College Board Unit Review",
            "content": "Table of Scores . Unit Score Grading . Unit 1 | 1/1 | Link | . Unit 2 | 0.95/1 | Link | . Unit 3 | 0.9/1 | Link | . Unit 4 | 1/1 | Link | . Unit 5 | NONE | OUR OWN LESSON - NO SCORE? | . Unit 6 | NONE | UNKNOWN | . TOTAL SCORE | 3.85/4 | 2 Unknown ones | . Unit 1 Primitives . Primitives are the most basic data types in Java and most other languages. The main types of primitives used in java are int, double, boolean, and char. Some properties unique to primitives in Java are that they can be compared with using the == operator, can be casted, and can be converted into Wrapper Classes (Java Object). . Casting (Division &amp; Rounding/Truncating) . Casting is a way to convert primitives into other primitive types (commonly from int to double or vice versa). When converting double to int, we can also truncate/round decimals to the nearest integer . int a = 10; int b = 3; // Examples of Casting // Casting in Division w/ casting (rounds down a/b in comparison to a more precise answer) System.out.println(a/b); System.out.println((double) a / b); // Casting to Round/Truncate double c = 3.5; System.out.println((int)(a + c)); . 3 3.3333333333333335 13 . Wrapper Classes . Wrapper classes enable an object oriented approach to primitives giving them access to methods like the toString method, the ability to be used in purely w ArrayLists. Some wrapper classes include Integer, Double, Boolean, and Character. They hold the same value as their primitive counterparts but open them to object oriented programming. . import java.util.ArrayList; // To initialize a Wrapper class as a variable, you instantiate just like any object Integer wrapperInteger = new Integer(10); System.out.println(wrapperInteger); // Some object only methods are shown below // toString() method System.out.println(&quot;This is a Wrapper Class: &quot; + wrapperInteger.toString()); // ArrayLists ArrayList&lt;Integer&gt; integers = new ArrayList&lt;Integer&gt;(); integers.add(wrapperInteger); System.out.println(integers); . 10 This is a Wrapper Class: 10 [10, 5] . Unit 2 Using Objects . Objects are just an instance created out of a class created w/ a constructor (which takes in parameters describing the object Methods in objects can be void (returns nothing) or have a return type specified. Static methods and properties are tied to class rather than object (ie. same value for all objects). Methods can be overloaded (have different sets of parameters) as long as order of types differs between method definitions even with same name. . Concatenation . Concatenation refers to the combination of strings. To concatenate non String types, you have to convert them into a String. When converting, primitives must be converted to wrapper classes in order to use the toString method. All objects must use toString method in order to be concatenated. Use + to concatenate strings. . String name = &quot;Nathan&quot;; Integer age = new Integer(17); System.out.println(&quot;My Name: &quot; + name); System.out.println(&quot;My Age: &quot; + age.toString()); . My Name: Don My Age: 17 . Math Class (Random) . Math class enables a lot of mathematical operations like floor, roof, exponents, rounding, logs, and other operations not in Java by default. It enables complex mathematical operations which can be used for programs like calculators. . // Floor Function System.out.println(Math.floor(10.999999999)); // Ceiling Function System.out.println(Math.ceil(10.999999999)); // Exponents System.out.println(Math.pow(10, 3)); // Logarithms in base 10 System.out.println(Math.log(2)); // Rounding System.out.println(Math.round(15.546432)); // Random (generates random number btwn 0 &amp; 1) System.out.println(Math.random()); . 10.0 11.0 1000.0 0.6931471805599453 16 0.7980473864210647 . Unit 3 Booleans, If/Else Statements, &amp; Comparison . Booleans are a key concept within computer science as a whole where they only store either True or False. Built on 0s and 1s, computers are essentially boolean based machines. Likewise, one can build complex methods through booleans and comparison operators/statements as the help with control flow in Java of code. The most common operators dealing with this include &lt;, &gt;, &lt;=, &gt;=, ==, !=, &amp;&amp;, and ||. If statements take in a boolean or boolean expression and run if the expression evaluates to &quot;true&quot;. Else &amp; Else if statements can be used in conjunction with if statements to run code if the if statement evaluates to false. . Comparisons w/ Primitives (numbers, characters, booleans), Strings, &amp; Objects . Comparing with Primitives, as stated above evaluate through == operator. Strings and Objects are evaluated through the .equals() method which is a default method inherited from the objects class. (more on that below) . int a = 0; int b = 0; int c = 1; // Comparing two same numbers System.out.println(a == b); // Comparing two different numbers System.out.println(a == c); String as = new String(&quot;yay&quot;); String bs = new String(&quot;cool&quot;); // Comparing the same string to itself (SAME memory location) System.out.println(as == as); // Comparing strings with same content using wrong operator (DIFFERENT memory location) System.out.println(as == bs); // Comparing strings with same content using correct .equals() System.out.println(as.equals(bs)); . true false true false false . Compound Boolean Expression . Using combinations of boolean operators, you can make compound boolean expressions. Operators that can be used include and (&amp;&amp;), or (||), not (!), as well as parenthesis for grouping purposes. . boolean a = true; boolean b = false; // Creating a compound expression boolean compound = !(a &amp;&amp; b) &amp;&amp; (b || a) &amp;&amp; (!b &amp;&amp; !a); // Printing the result System.out.println(compound); . false . Truth Tables . Can be used to see the values of boolean expressions. For example, below is truth tables for some common compound boolean expressions. . . De Morgan&#39;s Law . De Morgan&#39;s Law is useful for simplifying boolean expressions and logic. States that !(a &amp;&amp; b) = !a || !b AND !(a || b) = !a &amp;&amp; !b (distribute and switch the middle sign almost like commutative property) . boolean a = true; boolean b = false; boolean c = true; boolean d = false; // complicated boolean expression boolean res1 = !((!(a &amp;&amp; b)) || (!(a || b))); // simplified using De Morgan&#39;s Law once boolean res2 = !((!a || !b) || (!a &amp;&amp; !b)); //simplified using De Morgan&#39;s Law twice boolean res3 = !(!a || !b) &amp;&amp; !(!a &amp;&amp; !b); // all results are the same System.out.println(res1 + &quot; &quot; + res2 + &quot; &quot; + res3); . false false false . Unit 4 Loops . While loop runs while a boolean condition is true. For loops create a variable which is modified on every loop iteration and has an end condition (useful for iterating through arrays, especially in different ways based on the modification, ie. i += 2 for all even indexes). For &amp; while loops can be nested inside each other to achieve more iteration (really useful with 2D arrays). For each/Enhanced for loops really useful for looping through an array (int val : array) but limited in that they go through all elements from first to last and that cannot be modified. Loops help control repetition in our code as a sequential code flow controller. It also prevents us from excruciating arthritis. . For Loop &amp; Enhanced For Loop . For loops can be used to iterate through an index, and modify it in different ways in the for loop declaration. The enhanced for loop is exclusively used for iterating fully through an iterable (such as array). . // looping through even numbers for (int i = 0; i&lt;10; i+=2) { System.out.println(i); } int[] arr = {1, 2, 3, 7, 8}; // looping through array with conventional for lopo for (int i = 0; i&lt;arr.length; i++) { System.out.println(arr[i]); } // looping through array with enhanced for loop for (int i : arr) { System.out.println(i); } . While Loop &amp; Do While Loop . While loops run while a condition is true, the condition is checked before each iteration of the code is run. . Do while loops also run while a condition is true, but the condition is checked AFTER each iteration of the code is run. This means that no matter what the do block runs at least once before the condition is checked . int i = 0; boolean falseBool = false; // printing even numbers with while loop while (i &lt; 10) { System.out.println(i); i += 2; } // if condition is false while loop does not run at all while (falseBool) { System.out.println(&quot;inside while loop&quot;); } // if condition is false in do while, the loop runs once do { System.out.println(&quot;inside do-while loop&quot;); } while (falseBool); . Nested Loops . Loops can be used inside each other for better iteration and they are especially useful for 2D arrays which can be 2D and thus need to be iterated through twice to access each individual element. . int[][] arr = { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} }; // using nested for loops for 2D array for (int i = 0; i&lt;arr.length; i++) { for (int j = 0; j&lt;arr[i].length; j++) { System.out.print(arr[i][j] + &quot; &quot;); } System.out.println(); } . 1 2 3 4 5 6 7 8 9 . Unit 5 Classes (Own Lesson) . Classes can be used for creating objects and have two main things: properties and methods. Properties are used to store information about each object of a class (can be made private/public which determines accessibility outside of class). Methods are used to modify the object &amp; do things. Getter and Setter Methods can be used to modify properties of a class which are made private. . Breakdown of a Class . Breakdown of a Method . Access Modifiers . Access modifiers control whether properties and methods can be accessed outside the class. The public means the property/method is accessible outside while if it is private it is not accessible from outside the class. Protected usually refers to within the package (a package in this case is almost like a special type of directory). Default is when no access modifier is specified and by default only subclasses can access variables and package subclasses. Below is a table of them . . Static Methods &amp; Class Methods . Static properties and methods are part of the class rather than each object. Static methods do not require an object, and static properties only have one instance that is the same for all objects. . Creating a Class . Classes can be created using the class keyword along with definitions in front of it. A class should always be defined using upper camelcase (camelcase but first letter capital). . class SomeClass{ } . Main Method &amp; Tester Methods . The main method is used to test a class, is automatically called when class ran. It usually creates an object and can test methods hence it is mostly used as a tester method for classes. To execute the main portion of the code, a Main class with a main method is normally reserved which handles most of the executions of the code. . class SomeClass { // main method (definition for main method, more on individual parts later) public static void main(String[] args){ System.out.println(&quot;cool main method&quot;); } } SomeClass.main(null); . cool main method . this Keyword . The &quot;this&quot; keyword allows you to access properties of the class. See constructor example to see use of this keyword. . Constructors . Constructors are called whenever the object is created and usually initializes fields (data/attributes defined in the class). It does not return anything because the object is automatically given to the user when constructor is called and thus its return type is implied. . // creating a class (camel casing w/ first letter capitalized) class SomeClass { int someInt; String someString; // Constructor public SomeClass(int someInt, String someString){ // constructor passes in outside parameters if we want to initialize certain fields // this references objects own fields to differentiate (more on that later) this.someInt = someInt; this.someString = someString; } public static void main(String[] args){ SomeClass obj = new SomeClass(123, &quot;abc&quot;); System.out.println(obj.someInt); System.out.println(obj.someString); } } SomeClass.main(null); . 123 abc . Mutator Methods &amp; Setter Methods . These methods are used to get properties of an object from the outside the class definition. They are almost always necessary for private variables within classes. . Getters can be applied on only the properties which should be accessed outside the class. They always have a return type of whatever data field is being retrieved. . Setters are used to only set properties which are set outside the class. They are always void methods as their only purpose is to set variables. . class SomeClass { private int someInt; private String someString; public SomeClass(int someInt, String someString){ this.someInt = someInt; this.someString = someString; } // Getter method public int getSomeInt(){ return this.someInt; } public static void main(String[] args){ SomeClass obj = new SomeClass(123, &quot;abc&quot;); //Using Getter Method System.out.println(obj.getSomeInt()); } } SomeClass.main(null); . 123 . class SomeClass { private int someInt; private String someString; public SomeClass(int someInt, String someString){ this.someInt = someInt; this.someString = someString; } public int getSomeInt(){ return this.someInt; } // Setter public void setSomeInt(int newInt){ this.someInt = newInt; } public static void main(String[] args){ SomeClass obj = new SomeClass(123, &quot;abc&quot;); // Using setter method obj.setSomeInt(111); System.out.println(obj.getSomeInt()); } } SomeClass.main(null); . 111 . Unit 6 Arrays . What is an Array? Element -&gt; 1 value in an array Index -&gt; the position of the value in the array Declaring an array int[] array = new int[10]; Bound errors -&gt; accessing an element that does not exist Uninitialized and Unfilled arrays, assigning an array variable but not the whole array Traversing array, can use while but mainly for loop enhanced for loop .. for (int element:values) . public class ArrayMethods { private static int[] values = {1,2,3,4,5}; // Array public static void swap(){ System.out.println(&quot;0th Index = &quot; + values[0]); System.out.println(&quot;4th Index = &quot; + values[4]); int a = values[0]; int b = values[4]; values[0] = b; values[4] = a; System.out.println(&quot;0th Index = &quot; + values[0]); System.out.println(&quot;4th Index = &quot; + values[4]); } public static void replaceZero(){ for(int i = 0; i &lt; values.length; i++){ if(values[i] % 2 == 0){ values[i] = 0; } } for(int i : values){ System.out.print(i); } } } ArrayMethods.swap(); ArrayMethods.replaceZero(); .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/keylearnings/2022/12/22/cb-unit-review-copy.html",
            "relUrl": "/keylearnings/2022/12/22/cb-unit-review-copy.html",
            "date": " • Dec 22, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "FRQ 4 Notebook",
            "content": "FRQ 4 - Lightboard . public class LightBoard { /** The lights on the board, where true represents on and false represents off. */ private boolean[][] lights; /** Constructs a LightBoard object having numRows rows and numCols columns. * Precondition: numRows &gt; 0, numCols &gt; 0 * Postcondition: each light has a 40% probability of being set to on. */ public LightBoard(int numRows, int numCols) { /* to be implemented in part (a) */ } /** Evaluates a light in row index row and column index col and returns a status * as described in part (b). * Precondition: row and col are valid indexes in lights. */ public boolean evaluateLight(int row, int col) { /* to be implemented in part (b) */ } // There may be additional instance variables, constructors, and methods not shown. } . Part A . Write the constructor for the LightBoard class, which initializes lights so that each light is set to on with a 40% probability. The notation lights[r][c] represents the array element at row r and column c. . Complete the LightBoard constructor below. . /** Constructs a LightBoard object having numRows rows and numCols columns. * Precondition: numRows &gt; 0, numCols &gt; 0 * Postcondition: each light has a 40% probability of being set to on. */ import java.lang.Math; public LightBoard(int numRows, int numCols) { lights = new boolean lights[numRows][numCols]; for(r=0; r &lt; numRows; r++){ for(c=0; c &lt; numCols; c++){ int probability = 100 * Math.random(); if(probability &lt;= 40){ lights[r][c] = true; } else{ lights[r][c] = false; } } } } . Part B . Write the method evaluateLight, which computes and returns the status of a light at a given row and column based on the following rules. . If the light is on, return false if the number of lights in its column that are on is even, including the current light. | If the light is off, return true if the number of lights in its column that are on is divisible by three. | Otherwise, return the light’s current status. For example, suppose that LightBoard sim = new LightBoard(7, 5) creates a light board with the initial state shown below, where true represents a light that is on and false represents a light that is off. Lights that are off are shaded. | lights || 0 | 1 | 2 | 3 | 4 | ||||||| |0| true | true | false | true | true | |1| true | false | false | true | false | |2| true | false | false | true | true | |3| true | false | false | false | true | |4| true | false | false | false | true | |5| true | true | false | true | true | |6| false | false | false | false | false | . Sample calls to evaluateLight are shown below. | Call to evaluateLight | Value Returned | Explanation | |--|-|-| |sim.evaluateLight(0, 3);| false | The light is on, and the number of lights that are on in its column is even.| |sim.evaluateLight(6, 0);| true | The light is off, and the number of lights that are on in its column is divisible by 3.| |sim.evaluateLight(4, 1);| false |Returns the light’s current status.| |sim.evaluateLight(5, 4);| true | Returns the light’s current status. | . . Class information for this question . public class LightBoard | private boolean[][] lights | public LightBoard(int numRows, int numCols) | public boolean evaluateLight(int row, int col) | . Complete the evaluateLight method below. . /** Evaluates a light in row index row and column index col and returns a status * as described in part (b). * Precondition: row and col are valid indexes in lights. */ public boolean evaluateLight(int row, int col){ iif (lights[row][col] == true) { int count = 0; for (int r = 0; r &lt; lights.length; r++){ if (lights[r][col] == true){ count++; } } if (count % 2 == 1){ return true; } else{ return false; } } else if (lights[row][col] == false) { int count = 0; for (int r = 0; r &lt; lights.length; r++){ if (lights[r][col] == true){ count++; } } if (count % 3 == 0) { return true; } else { return false; } } } .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/codecodecode/2022/12/08/lights.html",
            "relUrl": "/codecodecode/2022/12/08/lights.html",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Title",
            "content": "",
            "url": "https://prorichyman.github.io/CSA-Fastpages/2022/12/08/lights-jvsc-f9735263-292a-4d97-8667-98ca1ce7ea504b2672ef-329f-4545-8f6f-e1512544a2e8.html",
            "relUrl": "/2022/12/08/lights-jvsc-f9735263-292a-4d97-8667-98ca1ce7ea504b2672ef-329f-4545-8f6f-e1512544a2e8.html",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "2D Arrays Notebook",
            "content": "Iterations and Repetition (2D Arrays) . An array inside of an array | Multi dimensional | iterating through an array to get values | . int[][] numbers; String[][] names; char[][] letters; float[][] floats; double[][] doubles; Object[][] objects; . Accessing Values Inside of an Array . int[][]products = new int [10][10]; //creating 2D Array | printing values up, down, left, right, upside down, badabing badaboong yadda yadda yes yes | . Homework . Create a class for 2D array learning. | Create a method too set a 2D array with arbitrary values | Create a method to reverse the 2D array and print out the values | Create a method that asks for the input of a position and it returns the corresponding value | Create a method that multiplies each value in a row and then adds all the products together | Create a new object to test out each method in the main function | . import java.util.Scanner; public class AaditGupta { int[][] bananas = {{1,2,3}, {4,5,6}, {7,8,9}}; public void regular(){ System.out.println(&quot;Regular Array - Unaltered&quot;); for(int i = 0; bananas.length &gt; i; i++){ for(int j=0; j &lt; bananas[i].length; j++){ System.out.print(bananas[i][j]); } System.out.println(&quot; &quot;); } System.out.println(&quot; &quot;); } public void mixmix(){ int[] a = bananas[0]; int[] b = bananas[2]; bananas[0] = b; bananas[2] = a; System.out.println(&quot;Array - Reversed&quot;); for(int i = 0; bananas.length &gt; i; i++){ for(int j=0; j &lt; bananas[i].length; j++){ System.out.print(bananas[i][j]); } System.out.println(&quot; &quot;); } bananas[2] = b; bananas[0] = a; System.out.println(&quot; &quot;); } public void input(){ System.out.println(&quot;Array - Input display&quot;); Scanner myObj = new Scanner(System.in); System.out.println(&quot;Enter row (integer)&quot;); int row = myObj.nextInt() - 1; // Read user input System.out.println(&quot;Enter column (integer)&quot;); int column = myObj.nextInt() - 1; // Read user input System.out.println(&quot;Row: &quot; + (row+1) + &quot; | Column: &quot; + (column+1) + &quot; | Number: &quot; +bananas[row][column]); System.out.println(&quot; &quot;); } public void multiply(){ System.out.println(&quot;Array - Sum of Products of Rows&quot;); int a = 0; int sum = 0; boolean first = true; for(int i=0; i &lt; bananas.length; i++){ for(int j=0; j &lt; bananas[i].length; j++){ if(first == true){ a += bananas[i][j]; first = false; } else{ a *= bananas[i][j]; } } sum += a; a = 0; first = true; } // 6, 120, 504 System.out.println(&quot;Sum = &quot; + sum); // 630 } public static void main(String[] args) { AaditGupta aaditGupta = new AaditGupta(); aaditGupta.regular(); aaditGupta.mixmix(); aaditGupta.input(); aaditGupta.multiply(); } } AaditGupta.main(null); . Regular Array - Unaltered 123 456 789 Array - Reversed 789 456 123 Array - Input display Enter row (integer) Enter column (integer) Row: 3 | Column: 3 | Number: 9 Array - Sum of Products of Rows Sum = 630 .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/codecodecode/2022/12/06/2DArrays.html",
            "relUrl": "/codecodecode/2022/12/06/2DArrays.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Unit VOCAB",
            "content": "VOCABULARY FOR THE UNITS . Casting and Wrapper class . Casting - Division: Round Division statement to the nearest integer. This can be used when a program can only handly integers | Casting - Rounding: Allows an equation to be rounded to the nearest integer, which can be very helpful | Wrapper Classes: Classes that can be created into a primtive type, such as int or boolean | . int a = 10; int b = 3; // Examples of Casting // Casting in Division w/ casting (rounds down a/b in comparison to a more precise answer) System.out.println(a/b); System.out.println((double) a / b); // Casting to Round/Truncate double c = 3.5; System.out.println((int)(a + c)); . 3 3.3333333333333335 13 . Concatenation, math and booleans . Concatenation: The process of joining two strings together. The + operator is used to concatenate two strings together. | Java Math Class: The import java math class gives a lot of math operations and features that can be used in your code | Compound Boolean Expression: If/Else statement block | . // Concatenation String name = &quot;Deez&quot;; String lastName = &quot;Nuts&quot;; System.out.println(name + &quot; &quot; + lastName); // Java Math Class import java.lang.Math; int max = 10; int min = 1; int range = max - min + 1; int rand = (int)(Math.random() * range) + min; System.out.println(rand); System.out.println(Math.sqrt(rand)); // Compound Boolean Expression if (true) { System.out.println(&quot;Hello&quot;); } else if (false) { System.out.println(&quot;World&quot;); } else { System.out.println(&quot;!&quot;); } . Deez Nuts 4 2.0 Hello . Truth Table, De Morgans and Comparing Numbers . Truth Table: A table where one column is each variable and another column for the possible value of the variable | De Morgans Law: Similar to Logic Gates from CSP. Talks about how || (or) and &amp;&amp; (and) | Comparing Numbers: Use the == operator to compare numbers | . // De Morgans Law if (!((true == true) &amp;&amp; (true == false))) { System.out.println(&quot;De Morgans law is true&quot;); } // Comparing Numbers int x = 1; int y = 2; if (x == y) { System.out.println(&quot;x is equal to y&quot;); } else if (x &gt; y) { System.out.println(&quot;x is greater than y&quot;); } else if (x &lt; y) { System.out.println(&quot;x is less than y&quot;); } else { System.out.println(&quot;x is not equal to y&quot;); } . De Morgans law is true x is less than y . Static Variables and Inheritance . Static Variables: Variables that are constant throughout the whole class. This can be beneficial when you need a variable to be able to be updated throughout the whole class | Inheritance: You can use extend method to get attributes from the class that is being extended from | . public class Test { public static int counter; public static void main(String[] args) { counter = counter + 1; System.out.println(counter); } } public class ExtendsTest extends Test { public static void main(String[] args) { counter = counter + 2; System.out.println(counter); } } Test testExample = new Test(); ExtendsTest extendsExample = new ExtendsTest(); testExample.main(null); extendsExample.main(null); . 1 3 . Polymorphism, Overloading and Overriding . Polymorphism: Allows you to have multiple methods with the same name in one class. This allows you to have multiple ways to do something that is dependant on what is being passed in into the class. Overloading is when there are many methods that have different parameters | Overriding is when there is a method with the same name but you modify in subclass | Late binding is when the compiler chooses which method to use | . | . public class PolymorphismExample { public void yo(int x) { System.out.println(&quot;Integer: &quot; + x); } public void yo(String x) { System.out.println(&quot;String: &quot; + x); } public void yo(double x) { System.out.println(&quot;Double: &quot; + x); } } PolymorphismExample poly = new PolymorphismExample(); poly.yo(1); poly.yo(&quot;Hello&quot;); poly.yo(1.0); . Integer: 1 String: Hello Double: 1.0 . Abstract and SUper classes . Abstract Class: Hiding certain details but making a barebones of something. For example, an abstract class could be car and then each class inherited would be like SUV or Truck. | Super Class: By using super class you can reference the upper class | . abstract class Car { public void hi() { System.out.println(&quot;Barebones Class&quot;); } } class SUV extends Car { public void hi() { System.out.println(&quot;The SUV is saying hi&quot;); } } class Truck extends Car { public void hi() { System.out.println(&quot;The truck is saying hi&quot;); } } // Instantiating the Car class would throw an error as it is abstract SUV suv = new SUV(); Truck truck = new Truck(); suv.hi(); truck.hi(); . The SUV is saying hi The truck is saying hi . Big O . Big O Notation: Big O notation is super helpful as it tells you how efficient your algorithm or program is. For example traversing an array would be O(n) because it depends on the size of n for how long the program will go. If you have a nested for loop then it would be O(n^2) because for each n you have another n. Hash map is O(1) and binary search is O(logn). | .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/keylearnings/2022/12/02/vocab.html",
            "relUrl": "/keylearnings/2022/12/02/vocab.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Title",
            "content": "",
            "url": "https://prorichyman.github.io/CSA-Fastpages/2022/12/02/units.html",
            "relUrl": "/2022/12/02/units.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Allunit",
            "content": "",
            "url": "https://prorichyman.github.io/CSA-Fastpages/2022/11/14/allunit.html",
            "relUrl": "/2022/11/14/allunit.html",
            "date": " • Nov 14, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Final Week",
            "content": "MCQ . Score : 34/40 . . Q14 . I got this one wrong because it didn’t know the syntax (Object x: array) would set the variable x to that variable within the list rather than just the variable’s index. So the right answer in this case e, v.getMileage(), because the variable doesn’t need to be called from the array anymore in order to get the index. . Q30 . The answer is wrong because when you substring(3 + 1, word.length()) + substring(0 , 3), the 3 is not included when you print the result of those two strings being added together, so the answer is ilercom rather than pilercom . Q31 . I’m going to be 100% honest, I did not see the top part when doing this problem, which resulted in my error because I thought it was just the little part was the whole problem. The answer is c because every loop of mystery generates the value of the [index] + [index + 1] when printing. . Q32 . This answer is wrong because when it goes through the loop, I thought since it was multiplying by n each time that the n would be the exponent. However, this is not the case since the base would actually be 4, since it’s going to be multiplied by 4 each time. . Q33 . This answer is wrong because I thought the loop would end after the sum reached 12, then it would print 12. However, this is wrong because I failed to recognize that k is never increased throughout the loop, so the while loop is always true and will never stop running and print an error. . Q40 . This answer is wrong because when printing, it prinst from bottom going up not the other way around, which is what I thought it was, so the answer is c rather than a . Unit HW’s 1-6 . Unit 1 - Primitives . Understanding of the definition of primitives that describe what something will return, like a boolean or a double Unit 2 - Objects . | Understanding of how to create objects ( Painter myPainter = new Painter() ), classes, return types and access modifiers Unit 3 - Booleans . | Understanding of ! &amp;&amp; “or” == /= and traversing through to fine true/false Unit 4 - Iteration . | Looping with for, while, and if loops and common practices Unit 5 - Writing Classes - Our lesson, No HW :) . Unit 6 - Array . | Declaring an array int[] array = new int[10], traversing through arrays w/ for loops | . Final Reflection . This trimester started off great. Starting off, I had good work ethics, doing work efficiently and not procrastinating till Sundays to do it all. However, it became very clear as the year progressed that my work started going down a slippery slope, and I resolved to doing most of my work on Sundays for this class, which did end up getting me slash-slash-slashed a little bit, a few weeks ago. I still fared off well regarding the assignments, and I went understood most of the material that was pushed out by you Mr.Mortensen. However, it did take ma little longer to understand the Arraylists. Going through the Code.Org was especially helpful to give me the basics of creating objects, creating fastpages and notebooks was fun, and I enjoyed finally getting to work on our PBL! Our PBL went great, as I was the Front-end Developer and I am proud to say that I’m pretty good at that stuff (HTML-CSS-JS). It was a little bit chaotic communicating between two groups, with some people not responding, then eventually switching from spring-portfolio to fastpages, but it all ended up working out in the very end. .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/keytakeaways/2022/11/07/final.html",
            "relUrl": "/keytakeaways/2022/11/07/final.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Arrays Notebook",
            "content": "What is an Array? . Element -&gt; 1 value in an array | Index -&gt; the position of the value in the array | Declaring an array int[] array = new int[10]; | Bound errors -&gt; accessing an element that does not exist | Uninitialized and Unfilled arrays, assigning an array variable but not the whole array | Traversing array, can use while but mainly for loop | enhanced for loop .. for (int element:values) | . Important Collegeboard . array.length(), array[i] | . // Write array methods for the Array Methods class below out of the options given above. public class ArrayMethods { private static int[] values = {1,2,3,4,5}; public static void swap(){ System.out.println(&quot;0th Index = &quot; + values[0]); System.out.println(&quot;4th Index = &quot; + values[4]); int a = values[0]; int b = values[4]; values[0] = b; values[4] = a; System.out.println(&quot;0th Index = &quot; + values[0]); System.out.println(&quot;4th Index = &quot; + values[4]); } public static void replaceZero(){ for(int i = 0; i &lt; values.length; i++){ if(values[i] % 2 == 0){ values[i] = 0; } } for(int i : values){ System.out.print(i); } } } ArrayMethods.swap(); ArrayMethods.replaceZero(); . 0th Index = 1 4th Index = 5 0th Index = 5 4th Index = 1 50301 .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/codecodecode/2022/11/07/arrays.html",
            "relUrl": "/codecodecode/2022/11/07/arrays.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Unit 1-5 Lesson Blogs",
            "content": "Unit 1: Primitives . See Jupyter Notebook here . Takeaways: . Java provides wrapper classes for all primitive data types like char, int, double, boolean where you can call in static methods that return values | Primitive wrapper objects or string objects are immutable so the methods can&#39;t change | Boolean, char, int, float, double are all primitive data types | String, Array, etc. are non-primitive data types | Learned to declare a variable that can be accessible and/or changed | Learned how to store data as variables | (=) is used to initialize variables or change its associated value | Operators are + - * / % | Compound operators are +=, -=, *=, /=, %= | Increment/decrement ++ or -- | . public class Integers { public static void main(String[] args) { System.out.println(Integer.MAX_VALUE); System.out.println(Integer.MIN_VALUE); int low = Integer.MAX_VALUE; int high = Integer.MIN_VALUE; } } Integers.main(null); // creating a class, wrapper classes for int . 2147483647 -2147483648 . Unit 2: Objects . See Jupyter Notebook here . Takeaways: . Learned the difference between classes vs. objects | Classes are blueprints for creating objects | Objects are instances within a class | Methods: certain set of code that runs a specific task | Class attributes are inherited by objects | Learned about myPainter in Code.org | Non static methods are dot operators | Overloaded methods give multiple methods the same name with different signatures | Void methods don&#39;t return values | Non void methods return a value of the same type defined in the method signature | Strings are created with String class constructor | Wrapper class: integer and double class are part of the java.lang package | Comparing numbers and objects using .equals() | static methods are a part of a class instead of an instance of a class which is why it&#39;s in a bracket in the class | class methods were just like in Code.org lessons | . public class ComparingObjects { public static void main(String[] args) { //creating constructor of the Double class Double x = new Double(100.50); //creating constructor of the Long class Long y = new Long(12345); //invoking the equals() method System.out.println(&quot;Objects are not equal, hence it&#39;s &quot; + x.equals(y)); } } ComparingObjects.main(null); // comparing objects using .equals() . Objects are not equal, hence it&#39;s false . Unit 3: Boolean . See Jupyter Notebook #1 here . See Jupyter Notebook #2 here . Takeaways: . Whether boolean expression is true or false dictates whether the code will run | If-else statements sets up alternate code if the first expression turns false | Else-if statements allow for more conditions to be defined | De Morgan&#39;s law: logical operators &amp;&amp; (and) ll(or) and !(not) | Comparing objects through == | Compound boolean expression check multiple values in a single statement with &amp;&amp; - like DeMorgan&#39;s Law | . public class Test1 { public static void main(String[] args) { boolean cleanedRoom = true; boolean didHomework = false; if (cleanedRoom &amp;&amp; didHomework) { System.out.println(&quot;You can go out&quot;); } else { System.out.println(&quot;No, you can&#39;t go out&quot;); } } } Test1.main(null); . No, you can&#39;t go out . Unit 4: Iteration . See Jupyter Notebook here . Takeaways: . While/for loops: repeats lines of code until a specific condition comes out false; can iterate over multiple elements | For loops are most tested | Strings: array chairs | Nested iteration: loop within a loop like when we did the monkeys and the rhymes | . import java.util.ArrayList; /* * Creator: Nighthawk Coding Society * Mini Lab Name: Hello Series,featuring Monkey Jumpers */ /** * Class for Monkey: a 2D array of Monkey * As well as method to print the Poem */ class Monkey { //The area between class definition and the 1st method is where we keep data for object in Java private static ArrayList&lt;String[]&gt; monkeyList = new ArrayList&lt;String[]&gt;(); //2D Array: AP CSA Unit 8: 2D array of strings private String[] monkeyASCII; /** * Constructor initializes a 2D array of Monkey */ public Monkey(String[] monkeyASCII) { this.monkeyASCII = monkeyASCII; monkeyList.add(monkeyASCII); } /** * Loop and print monkey in array * ... repeat until you reach zero ... */ public static void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Monkey Jumpers Poem in Java with Objects!!!&quot;); // monkey (non-primitive) defined in constructor knows its length int monkeyCount = monkeyList.size(); for (int i = 1; i &lt;= monkeyCount; i++) //loops through 2D array length forwards { //this print statement shows current count of Monkey // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; little monkey jumping on the bed...&quot;); //how many separate parts are there in a monkey monkey? for (int row = 0; row &lt; i; row++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each monkey part by part, will eventually print entire column*/ for (int col = 0; col &lt; monkeyList.get(row).length; col++) { // prints specific part of the monkey from the column System.out.print(monkeyList.get(row)[col] + &quot; &quot;); //this is new line between separate parts System.out.println(); } //this new line gives separation between stanza of poem System.out.println(); } //countdown for poem, decrementing monkeyCount variable by 1 monkeyCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;Too many monkeys jumping on the bed&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { Monkey monkey0 = new Monkey(new String[]{ &quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, //[0][0] eyes &quot; _⏄_/ &quot;, //[0][1] chin &quot; --0-- &quot;, //[0][2] body &quot; ⎛ ⎞ &quot; //[0][3] legs }); Monkey monkey1 = new Monkey(new String[]{ &quot; ʕ༼ ◕_◕ ༽ʔ&quot;, //[1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; }); Monkey monkey2 = new Monkey(new String[]{ &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, //[2][0] &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; }); Monkey monkey3 = new Monkey(new String[]{ &quot;ʕ ͡° ͜ʖ ° ͡ʔ&quot;, //[3][0] &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; }); Monkey monkey4 = new Monkey(new String[]{ &quot; (◕‿◕✿) &quot;, //[4][0] &quot; _⍾_/ &quot;, //[4][1] &quot; ==4== &quot;, //[4][2] &quot; _/ _ &quot; //[4][3] }); Monkey.printPoem(); //a new monkey list and output in one step } } Monkey.main(null); . Monkey Jumpers Poem in Java with Objects!!! 1 little monkey jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ 2 little monkey jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ 3 little monkey jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ ʕ(▀ ⍡ ▀)ʔ _⎐_/ &lt;-2-&gt; 〈 〉 Too many monkeys jumping on the bed 0000000000000000000000000000000000 THE END . Unit 5: Writing Classes . See Jupyter Notebook here . Takeaways: . Classes are blueprints to create objects and define attributes | Instances: attributes, constructors, methods, objects | Public classes: no restricted access - constructors | Private classes: restricted access - instance variables | Accessor method (getter): allows other objects to obtain values of instance variables or static variables | Non void methods return a single value | toString() method is a overridden method that provides description of a specific object | Mutator Method (setter): void method that changes value of instance variables/static variable | . Unit 6: Arrays . See Jupyter Notebook #1 here . See Jupyter Notebook #2 here . Takeaways: . Arrays: one type of data storage | Reference types | Need import java.util Arrays | Initialize arrays using constructors | Access elements through arrayName[index] | .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/keylearnings/2022/11/06/5units.html",
            "relUrl": "/keylearnings/2022/11/06/5units.html",
            "date": " • Nov 6, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "FrontEnd Developer PBL",
            "content": "Wireframes . .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/pbl/2022/10/24/22-scioly.html",
            "relUrl": "/pbl/2022/10/24/22-scioly.html",
            "date": " • Oct 24, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Iteration Homework",
            "content": "Part 1 . public class Guessing { static int b = randomNumber(); static boolean gameRunning = true; public static int randomNumber() { double a = (1 + Math.random() * 100); return ((int) Math.floor(a)); } public static void newNumber(){ b = randomNumber(); } public static String guessing(String guess) { int c = Integer.valueOf(guess); if (c != b) { if (c &gt; b) { return (c + &quot; was not the number,&quot; + &quot; nlower n&quot;); } if (c &lt; b) { return ( c + &quot; was not the number,&quot; + &quot; nhigher n&quot;); } } if (c == b) { gameRunning = false; return &quot;You guessed it! The number was &quot; + b; } return &quot;error&quot;; } } public class Main{ public static void main(String[] args){ Scanner scanner = new Scanner(System.in); while(Guessing.gameRunning){ System.out.println(&quot;Type Guess Here: &quot;); String input = scanner.nextLine(); System.out.println(Guessing.guessing(input)); } } } Main.main(null); . Type Guess Here: 50 was not the number, higher Type Guess Here: 75 was not the number, higher Type Guess Here: 90 was not the number, higher Type Guess Here: 92 was not the number, higher Type Guess Here: You guessed it! The number was 94 . Part 2 .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/codecodecode/2022/10/23/iteration-hw.html",
            "relUrl": "/codecodecode/2022/10/23/iteration-hw.html",
            "date": " • Oct 23, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Boolean and If Statement Homework",
            "content": "2009 3b . public int getChargeStartTime(int chargeTime){ int startTime = 0; for (int i = 1; i &lt; 24; i++){ if (this.getChargingCost(i, chargeTime) &lt; this.getChargingCost(startTime, chargeTime)){ startTime = i; } } return startTime; } . 2017 1b . public boolean isStrictlyIncreasing(){ for (int i = 0; i &lt; digitList.size()-1; i++){ if (digitList.get(i).intValue() &gt;= digitList.get(i+1).intValue()){ return false; } } return true; } . 2019 3b . public boolean evaluateLight(int row, int col) { int onInCol = 0; for (int r = 0; r &lt; lights.length; r++) { if (lights[r][col]) { onInCol++; } } if (lights[row][col] &amp;&amp; onInCol % 2 == 0) { return false; } else if (!lights[row][col] &amp;&amp; onInCol % 3 == 0) { return true; } else { return lights[row][col]; } } .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/codecodecode/2022/10/23/boolean-and-if-statements-hw.html",
            "relUrl": "/codecodecode/2022/10/23/boolean-and-if-statements-hw.html",
            "date": " • Oct 23, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Iteration Notebook",
            "content": "Iteration . ++ / -- operator, increase before or after a | while loops, for, recursion | while - while something is true the loop will keep recurring | for - for each thing in a sequence, the code will repeat | recursion loop - calls itself to repeat | nested iteration - putting a loop inside of a loop | . import java.util.Scanner; public class Checker { public static void main(String[] args) { int number; // Create a Scanner object for keyboard input. Scanner keyboard = new Scanner(System.in); // Get a number from the user. System.out.print(&quot;Enter a number in the range of 1 through 100: &quot;); number = keyboard.nextInt(); while (number &gt; 100 || number &lt; 1 || ) { System.out.print(&quot;Invalid input. Enter a number in the range &quot; + &quot;of 1 through 100: &quot;); number = keyboard.nextInt(); } } } . public class LoopConversion { public static void main(String[] args) { //convert to for loop for (int count = 0; count &lt; 5; count++) { System.out.println(&quot;count is &quot; + count); count++; } } } . public class Clock { public static void main(String[] args) { for(int hours = 1; hours &lt;= 12; hours++) { for (int minutes = 0; minutes &lt;= 59; minutes++) { for (int seconds = 0; seconds &lt;= 59; seconds++) { System.out.printf(&quot;%02d:%02d:%02d n&quot;, hours, minutes, seconds); } } } } } . for(int i = 0; i &lt; 5; i++){ System.out.print(i); } . 01234 . int i=0; while(i&lt;5){ System.out.print(i); i++; } . 01234 . Homework . - .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/codecodecode/2022/10/20/Iterations.html",
            "relUrl": "/codecodecode/2022/10/20/Iterations.html",
            "date": " • Oct 20, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Boolean Expressions and If Statements Notebook",
            "content": "Boolean Expressions and If Statements . 15%-17.5% of AP Test | . if (true) { System.out.println(&quot;Hi&quot;); } //true and not false so system prints out &quot;Hello&quot; if (true &amp;&amp; !false) { System.out.println(&quot;Hello&quot;); } . Homework . 2009 FRQ 3b 2017 FRQ 1b 2019 FRQ 3b .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/codecodecode/2022/10/18/boolean.html",
            "relUrl": "/codecodecode/2022/10/18/boolean.html",
            "date": " • Oct 18, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Objects Notebook",
            "content": "Objects (OOP) . Classes are a template/blueprint | Class - Fruit: Object - Apple, Banana, Kiwi | CLasses can contain data members, methods and constructors | . Painter mypainter = new Painter(); . Access modifier : Public, Protected, Private, Default | Return type : data type returned by the method if none its void . | Defining and calling methods are advantageous because it can be used for reuse, optimization and organization . | Use already present methods and MATH | | . Homework . GOBLIN | . import java.lang.Math; public class Goblin { private String name; private int HP; private int DMG; private double hitChance; public String getName() { return name; } public int getHP() { return HP; } public int getDMG() { return DMG; } public double getHitChance() { return hitChance; } public boolean isAlive() { if (this.HP &gt; 0) { return true; } else { return false; } } public void setName(String newName) { this.name = newName; } public void setHP(int newHP) { this.HP = newHP; } public void takeDMG(int takenDamage) { this.HP -= takenDamage; } public void setDMG(int newDMG) { this.DMG = newDMG; } public void setHitChance(double newHitChance) { this.hitChance = newHitChance; } } public class Duel { public static void fight(Goblin goblin1, Goblin goblin2) { while (goblin1.isAlive() &amp;&amp; goblin2.isAlive()) { goblin1.takeDMG(goblin2.getDMG()); System.out.println(goblin1.getName() + &quot; takes &quot; + goblin2.getDMG() + &quot; damage&quot;); System.out.println(goblin1.getName() + &quot; HP: &quot; + goblin1.getHP()); if (!goblin1.isAlive()) { System.out.println(goblin1.getName() + &quot; has perished&quot;); break; } if (Math.random() &lt; goblin1.getHitChance()) { goblin2.takeDMG(goblin1.getDMG()); System.out.println(goblin2.getName() + &quot; takes &quot; + goblin1.getDMG() + &quot; damage&quot;); System.out.println(goblin2.getName() + &quot; HP: &quot; + goblin2.getHP()); if (!goblin2.isAlive()) { System.out.println(goblin2.getName() + &quot; has perished&quot;); break; } } else{ System.out.println(goblin1.getName() + &quot; missed the attack!&quot;); } } } public static void main(String[] args) { Goblin goblin1 = new Goblin(); goblin1.setName(&quot;jeffrey&quot;); goblin1.setHP(12); goblin1.setDMG(2); goblin1.setHitChance(0.50); Goblin goblin2 = new Goblin(); goblin2.setName(&quot;Gunther the great&quot;); goblin2.setHP(4); goblin2.setDMG(1); goblin2.setHitChance(1); fight(goblin1, goblin2); } } Duel.main(null); . jeffrey takes 1 damage jeffrey HP: 11 Gunther the great takes 2 damage Gunther the great HP: 2 jeffrey takes 1 damage jeffrey HP: 10 jeffrey missed the attack! jeffrey takes 1 damage jeffrey HP: 9 jeffrey missed the attack! jeffrey takes 1 damage jeffrey HP: 8 Gunther the great takes 2 damage Gunther the great HP: 0 Gunther the great has perished .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/codecodecode/2022/10/13/objects.html",
            "relUrl": "/codecodecode/2022/10/13/objects.html",
            "date": " • Oct 13, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Primitives Notebook",
            "content": "Primitives . String Literals vs Literals, Exceptions, | OOP, compiles into javac first and into byte than runs on JVM | Garbage Collection, Multithreading - multiple programs at once . | primitives - predefined, cannot call methods: Boolean, Int(2-3bits), Double(64bits), Char, Float, Long . | Naming conventions . | lowercase at start, words after is capital ( toTheMoon ) . | Casting . | Manual casting vs automatic | Narrowing bigger -&gt; smaller, Widening smaller -&gt; bigger . | Operator precedents . | Left -&gt; Right, PEMDAS . | int x= 23; . | x *= 2; | x %= 10; | System.out.println(x); . | Scanners . | import java.util.Scaner; | Scanner scan = Scanner(System.in); | . Exercise/Game . Order : 1 -&gt; 3 -&gt; 2 -&gt; 4 -&gt; 6 -&gt; 5 . Homework . 2006 FRQ from College Board - Question 1, 2a and 3a | . FRQ 1a-1c . public class Appointment { // returns the time interval of this Appointment public TimeInterval getTime() { /* implementation not shown */ } // returns true if the time interval of this Appointment // overlaps with the time interval of other; // otherwise, returns false public boolean conflictsWith(Appointment other){ if(getTime().overlapsWith(other.getTime())){ return true } else{ return false } } // There may be fields, constructors, and methods that are not shown. } . public class DailySchedule { // contains Appointment objects, no two Appointments overlap private ArrayList apptList; public DailySchedule() { apptList = new ArrayList(); } // removes all appointments that overlap the given Appointment // postcondition: all appointments that have a time conflict with // appt have been removed from this DailySchedule public void clearConflicts(Appointment appt){ int i = 0; while (i &lt; apptList.size()){ if (appt.conflictsWith((Appointment)(apptList.get(i)))){ apptList.remove(i); } else{ i++; } } } /* to be implemented in part (b) */ } // if emergency is true, clears any overlapping appointments and adds // appt to this DailySchedule; otherwise, if there are no conflicting // appointments, adds appt to this DailySchedule; // returns true if the appointment was added; // otherwise, returns false public boolean addAppt(Appointment appt, boolean emergency){ if (emergency){ clearConflicts(appt); } else{ for (int i = 0; i &lt; apptList.size(); i++){ if (appt.conflictsWith((Appointment)apptList.get(i))){ return false; } } } return apptList.add(appt); } . FRQ 2a . public double purchasePrice() { return (1 + taxRate) * getListPrice(); } . FRQ 3a . public int compareCustomer(Customer other){ int nameCompare = getName().compareTo(other.getName()); if (nameCompare != 0){ return nameCompare; } else{ return getID() - other.getID(); } } .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/codecodecode/2022/10/12/primitives.html",
            "relUrl": "/codecodecode/2022/10/12/primitives.html",
            "date": " • Oct 12, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Arraylists Notebook",
            "content": "import java.util.*; public class Member{ //instantiates attributes static int idCounter = 0; int id; int grade; String name; String email; String phoneNumber; String password; int yearsInSciOly; String team; String[] events; //Constructor for each attribute public Member(int grade, String name, String email, String phoneNumber, String password, int yearsInSciOly, String team, String[] events){ this.id = idCounter; idCounter++; this.grade = grade; this.name = name; this.email = email; this.phoneNumber = phoneNumber; this.password = password; this.yearsInSciOly = yearsInSciOly; this.team = team; this.events = events; } //creates general ArrayList using Member objects public static ArrayList&lt;Member&gt; createMemberList(){ Member member1 = new Member(11, &quot;Your Mom&quot;, &quot;mom.your@gmail.com&quot;, &quot;696-696-9696&quot;, &quot;12345&quot;, 5, &quot;deez&quot;, new String[]{&quot;Fermi&quot;, &quot;Astrology&quot;, &quot;your mom&quot;}); Member member2 = new Member(12, &quot;Joe&quot;, &quot;joe.your@gmail.com&quot;, &quot;958-696-9696&quot;, &quot;123456&quot;, 5, &quot;deez&quot;, new String[]{&quot;Fermi&quot;, &quot;joe star&quot;, &quot;your mom&quot;}); Member member3 = new Member(9, &quot;Jack&quot;, &quot;jack.your@gmail.com&quot;, &quot;542-696-9696&quot;, &quot;23456&quot;, 5, &quot;deez&quot;, new String[]{&quot;Fermi&quot;, &quot;Niki&quot;, &quot;How to Cope&quot;}); Member member4 = new Member(10, &quot;Jill&quot;, &quot;jill.your@gmail.com&quot;, &quot;234-696-9696&quot;, &quot;123456&quot;, 5, &quot;deez&quot;,new String[]{&quot;Fermi&quot;, &quot;Chem Lab&quot;, &quot;Krish Patil&quot;}); ArrayList&lt;Member&gt; memberList = new ArrayList&lt;&gt;(); //add() method adding members; useful for adding new members every time new member object instantiated memberList.add(member1); memberList.add(member2); memberList.add(member3); memberList.add(member4); return memberList; } //print method that prints the name attribute of each object, prints method being used public static void printMembers(ArrayList&lt;Member&gt; memberList, String arrayListMethod){ System.out.println(&quot;-&quot;); System.out.println(&quot;Method: &quot; + arrayListMethod); //size() method gets integer length of memberList; useful for keeping track of number of members for (int i = 0; i &lt; memberList.size(); i++){ //get() method returns the object specified by index; useful for getting data of individual members //.name retrieves the name attribute from the Member object System.out.println(memberList.get(i).name); } if (memberList.size() == 0){ System.out.println(&quot;no one here :(&quot;); } System.out.println(&quot;-&quot;); } //Simple log in system that returns true or false (yes it is terribly unsecure) public boolean login(String input){ if (input.equals(password)){ return true; }else{ return false; } } //main method public static void main(String[] args){ //creates memberList and prints members; some uses of methods within print method ArrayList&lt;Member&gt; memberList = createMemberList(); printMembers(memberList, &quot;instantiating memberList array; get(); size(); attribute specification&quot;); //clear method; Useful for clearing members every new season from current competition databases memberList.clear(); printMembers(memberList, &quot;clear()&quot;); memberList = createMemberList(); } } Member.main(null); . public class Main{ public static void main(){ ArrayList&lt;Member&gt; memberList = Member.createMemberList(); //creates list of Member objects memberList.add(new Member(11, &quot;Morb&quot;, &quot;tehee.your@gmail.com&quot;, &quot;754-696-9696&quot;, &quot;34542&quot;, 6, &quot;deez&quot;, new String[]{&quot;Green Generation&quot;, &quot;Anime&quot;, &quot;How to Hit Man&quot;})); } } .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/codecodecode/2022/10/06/arraylists.html",
            "relUrl": "/codecodecode/2022/10/06/arraylists.html",
            "date": " • Oct 6, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "API Implementation",
            "content": "Explanation of API&#39;s . API&#39;s are basically a way to store a large amount of data and then be able to get that data without having to copy paste it directly from another source. Basically, you can call API&#39;s in java and then have that data be transferred so that you can do things with it. JSON is used to transmit data. With an API, you save so much time. Since they&#39;re just basically a massive data pool, you can easily take out data. Unfortunately, these have limitations that we cannot get around without paying a bit, but we will not be doing that in this case. . import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; //RapidAPI header https://rapidapi.com/spamakashrajtech/api/corona-virus-world-and-india-data HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://google-translate1.p.rapidapi.com/language/translate/v2/detect&quot;)) .header(&quot;content-type&quot;, &quot;application/x-www-form-urlencoded&quot;) .header(&quot;Accept-Encoding&quot;, &quot;application/gzip&quot;) .header(&quot;X-RapidAPI-Key&quot;, &quot;1549fa8a93msh73da228ed60b0a1p1beb30jsn1480b3d082a4&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;google-translate1.p.rapidapi.com&quot;) .method(&quot;POST&quot;, HttpRequest.BodyPublishers.ofString(&quot;q=English%20is%20hard%2C%20but%20detectably%20so&quot;)) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(response.body()); . {&#34;data&#34;:{&#34;detections&#34;:[[{&#34;isReliable&#34;:false,&#34;confidence&#34;:1,&#34;language&#34;:&#34;en&#34;}]]}} . package com.nighthawk.spring_portfolio.mvc.translate; import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; import java.util.Date; import java.util.HashMap; import org.json.simple.JSONObject; import org.json.simple.parser.JSONParser; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; @RestController // annotation to create a RESTful web services @RequestMapping(&quot;/api/google-translate1&quot;) //prefix of API public class translate { private JSONObject body; //last run result private HttpStatus status; //last run status String last_run = null; //last run day of month // GET Covid 19 Stats @GetMapping(&quot;/daily&quot;) //added to end of prefix as endpoint public ResponseEntity&lt;JSONObject&gt; getTranslate() { //calls API once a day, sets body and status properties String today = new Date().toString().substring(0,10); if (last_run == null || !today.equals(last_run)) { try { //APIs can fail (ie Internet or Service down) //RapidAPI header HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://google-translate1.p.rapidapi.com/language/translate/v2/detect&quot;)) .header(&quot;content-type&quot;, &quot;application/x-www-form-urlencoded&quot;) .header(&quot;Accept-Encoding&quot;, &quot;application/gzip&quot;) .header(&quot;X-RapidAPI-Key&quot;, &quot;1549fa8a93msh73da228ed60b0a1p1beb30jsn1480b3d082a4&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;google-translate1.p.rapidapi.com&quot;) .method(&quot;POST&quot;, HttpRequest.BodyPublishers.ofString(&quot;q=English%20is%20hard%2C%20but%20detectably%20so&quot;)) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); //JSONParser extracts text body and parses to JSONObject this.body = (JSONObject) new JSONParser().parse(response.body()); this.status = HttpStatus.OK; //200 success this.last_run = today; } catch (Exception e) { //capture failure info HashMap&lt;String, String&gt; status = new HashMap&lt;&gt;(); status.put(&quot;status&quot;, &quot;RapidApi failure: &quot; + e); //Setup object for error this.body = (JSONObject) status; this.status = HttpStatus.INTERNAL_SERVER_ERROR; //500 error this.last_run = null; } } //return JSONObject in RESTful style return new ResponseEntity&lt;&gt;(body, status); } } .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/pbl/2022/09/29/API-Implementation.html",
            "relUrl": "/pbl/2022/09/29/API-Implementation.html",
            "date": " • Sep 29, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "2D Array Images",
            "content": "import javax.imageio.ImageIO; import java.io.File; import java.io.IOException; import java.awt.image.BufferedImage; public class ImageIOTest { public static void main( String[] args ){ BufferedImage img = null; // buffer type try { // Name of file and directories String name = &quot;BlueSunset&quot;; String in = &quot;images/&quot;; String out = &quot;images/tmp/&quot;; // Either use URL or File for reading image using ImageIO File imageFile = new File(in + name + &quot;.png&quot;); img = ImageIO.read(imageFile); // set buffer of image data // ImageIO Image write to gif in Java // Documentation https://docs.oracle.com/javase/tutorial/2d/images/index.html ImageIO.write(img, &quot;gif&quot;, new File(out + name + &quot;.gif&quot;) ); // write buffer to gif } catch (IOException e) { e.printStackTrace(); } System.out.println(&quot;Success&quot;); } } ImageIOTest.main(null); . Success . Image Scaling and ASCII Conversion . import javax.imageio.ImageIO; import java.io.File; import java.io.IOException; import java.awt.image.BufferedImage; public class ImageIOTest { public static void main( String[] args ){ BufferedImage img = null; // buffer type try { // Name of file and directories String name = &quot;MonaLisa&quot;; String in = &quot;images/&quot;; String out = &quot;images/tmp/&quot;; // Either use URL or File for reading image using ImageIO File imageFile = new File(in + name + &quot;.png&quot;); img = ImageIO.read(imageFile); // set buffer of image data // ImageIO Image write to gif in Java // Documentation https://docs.oracle.com/javase/tutorial/2d/images/index.html ImageIO.write(img, &quot;gif&quot;, new File(out + name + &quot;.gif&quot;) ); // write buffer to gif } catch (IOException e) { e.printStackTrace(); } System.out.println(&quot;Success&quot;); } } ImageIOTest.main(null); Image Scaling and ASCII Conversion In this example we print out a row of text for each row in the image. However, it seems as if the image is too tall. To address this problem, try to output a single character per block of pixels. In particular, average the grayscale values in a rectangular block that’s twice as tall as it is wide, and print out a single character for this block. import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); monaLisa.printStats(&quot;Original&quot;); monaLisa.resize(33); monaLisa.printStats(&quot;Scaled&quot;); monaLisa.convertToAscii(); Pics pumpkin = new Pics(&quot;pumpkin&quot;, &quot;png&quot;); pumpkin.printStats(&quot;Original&quot;); pumpkin.resize(33); pumpkin.printStats(&quot;Scaled&quot;); pumpkin.convertToAscii(); } } Pics.main(null); . Original: 1330606 922x922 images/BlueSunset.png Scaled: 226836 304x304 images/tmp/BlueSunset.png . java.lang.NullPointerException: Cannot invoke &#34;java.awt.image.BufferedImage.getRGB(int, int)&#34; because &#34;&lt;local1&gt;&#34; is null at Pics.redScale(#32:1) at Pics.main(#32:1) at .(#38:1) . The Kernel crashed while executing code in the the current cell or a previous cell. Please review the code in the cell(s) to identify a possible cause of the failure. Click &lt;a href=&#39;https://aka.ms/vscodeJupyterKernelCrash&#39;&gt;here&lt;/a&gt; for more info. View Jupyter &lt;a href=&#39;command:jupyter.viewOutput&#39;&gt;log&lt;/a&gt; for further details. . Setup and Getting Data . Before we write any code that color scales, we must first make a method that will get all of the data from the image that we put in. This is so that we don&#39;t rewrite the code over and over again. . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; abstract class ImageData { protected final String inDir = &quot;images/&quot;; // location of images protected final String outDir = &quot;images/tmp/&quot;; // location of created files protected String inFile; protected String resizedFile; protected String colorFile; protected String ext; // extension of file protected long bytes; protected int width; protected int height; // get attributes of picture public ImageData(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.colorFile = this.outDir + name + &quot;New&quot; + &quot;.png&quot;; this.setStats(); } public ImageData(String image) { this(image, &quot;png&quot;); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } //ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // Will be used later protected abstract void scale(String color); } . Color Scaling . Now, moving onto the hacks. The goal is to be able to scale the colors of the image so that they are Red, Green, or Blue. Rather than creating 3 separate methods to do this, we can rather just make a method that does all 3 at the same time! We can do this by specifying which color we want it to be scaled to (red, green, or blue) and then have a different output for each. Also, I added gray scaling as well. To do this, you would just take the average of all of the RGB values and then set that as the R, G, and B value of that particular color cell. If you want to do ASCII, input ASCII into the method so that the method converts the image to ASCII. . package _notebooks; import java.awt.Color; import java.awt.image.BufferedImage; import java.io.File; import java.io.IOException; import java.nio.file.Files; import javax.imageio.ImageIO; public class ColorScale extends ImageData { public ColorScale(String name, String color, String ext) { super(name, ext); this.colorFile = this.outDir + name + color + &quot;.png&quot;; } public ColorScale(String name, String color) { super(name, color); this.colorFile = this.outDir + name + color + &quot;.png&quot;; } @Override protected void scale(String color) { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; Color col = null; // Deletes previously named file if exists try { File file = new File(this.colorFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { e.printStackTrace(); } if (color.equals(&quot;Red&quot;)){ for (int i = 0; i &lt; this.height; i++) { for (int j = 0; j &lt; this.width; j++) { Color col = new Color(img.getRGB(j, i)); int rgb = new Color(col.getRed(), 0, 0).getRGB(); img.setRGB(j, i, rgb); } } } if (color.equals(&quot;Blue&quot;)){ for (int i = 0; i &lt; this.height; i++) { for (int j = 0; j &lt; this.width; j++) { Color col = new Color(img.getRGB(j, i)); int rgb = new Color(0, 0, col.getBlue()).getRGB(); img.setRGB(j, i, rgb); } } } if (color.equals(&quot;Green&quot;)){ for (int i = 0; i &lt; this.height; i++) { for (int j = 0; j &lt; this.width; j++) { Color col = new Color(img.getRGB(j, i)); int rgb = new Color(0, col.getGreen(), 0).getRGB(); img.setRGB(j, i, rgb); } } } if (color.equals(&quot;Gray&quot;)){ for (int i = 0; i &lt; this.height; i++){ for (int j = 0; j &lt; this.width; j++){ Color col = new Color(img.getRGB(j,i)); int rgb = new Color(((col.getRed()+ col.getGreen()+ col.getBlue())/3), ((col.getRed()+ col.getGreen()+ col.getBlue())/3), ((col.getRed()+ col.getGreen()+ col.getBlue())/3)).getRGB(); img.setRGB(j, i, rgb); } } } if(color.equals(&quot;ASCII&quot;)){ final int XLENGTH = 1; final int YLENGTH = 2; for (int i = 0; i &lt; img.getHeight(); i += 4) { for (int j = 0; j &lt; img.getWidth(); j += 2) { double colorSum = 0; int counter = 0; for (int k = 0; k &lt; XLENGTH; k++) { for (int l = 0; l &lt; YLENGTH; l++) { if (k &lt; img.getWidth() &amp;&amp; l &lt; img.getHeight()) { counter++; col = new Color(img.getRGB(j + k, i + l)); colorSum += (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col.getGreen() * 0.11))); } } } double average = colorSum / counter; try { asciiPrt.print(asciiChar(average)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } try { ImageIO.write(img, &quot;png&quot;, new File(this.colorFile) ); } catch (IOException e) { e.printStackTrace(); } } public static void main(String[] args) { ColorScale BlueSunset = new ColorScale(&quot;BlueSunset&quot;, &quot;png&quot;); BlueSunset.scale(&quot;Red&quot;); BlueSunset.scale(&quot;Green&quot;); BlueSunset.scale(&quot;Blue&quot;); BlueSunset.scale(&quot;Gray&quot;); } } . Click on the links if you want to see the original image, the Red scaled image, the Green scaled image, the Blue scaled image, and the Gray scaled image. As for the ASCII, it was coded but the output is very scuffed and does not appeal to the eyes so I&#39;m not going to show it (for your own good I assure you). The picture is very monotone and that causes it to not have the best ASCII output. .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/keylearnings/2022/09/27/Image-2D-array.html",
            "relUrl": "/keylearnings/2022/09/27/Image-2D-array.html",
            "date": " • Sep 27, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "JavaScript UI Development",
            "content": "console.log(&quot;Hi&quot;); . Hi . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); //&quot;typeof&quot; keyword returns the type. } . function Person(name, email, classOf) { this.name = name; this.email = email; this.classOf = classOf; this.role = &quot;&quot;; } Person.prototype.setRole = function(role) { this.role = role; } Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.email, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jmortensen@powayusd.com&quot;, 1977); // object type is easy to work with in JavaScript logItType(teacher); // before role logItType(teacher.toJSON()); // ok to do this even though role is not yet defined // output of Object and JSON/string associated with Teacher teacher.setRole(&quot;Teacher&quot;); // set the role logItType(teacher); logItType(teacher.toJSON()); . object ; Person { name: &#39;Mr M&#39;, email: &#39;jmortensen@powayusd.com&#39;, classOf: 1977, role: &#39;&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jmortensen@powayusd.com&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;&#34;} object ; Person { name: &#39;Mr M&#39;, email: &#39;jmortensen@powayusd.com&#39;, classOf: 1977, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jmortensen@powayusd.com&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} . var students = [ new Person(&quot;Krish Patil&quot;, &quot;krishpatil1019@gmail.com&quot;, 2024), new Person(&quot;Don Tran&quot;, &quot;donqt15@gmail.com&quot;, 2024), new Person(&quot;Nathan Manangan&quot;, &quot;prorichyman@gmail.com&quot;, 2024), new Person(&quot;Nicholas Ramos&quot;, &quot;nicky.jay77@gmail.com&quot;, 2024), ]; function Classroom(teacher, students){ teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } compsci = new Classroom(teacher, students); logItType(compsci.classroom); logItType(compsci.classroom[0].name); logItType(compsci.json[0]); logItType(JSON.parse(compsci.json[0])); . object ; [ Person { name: &#39;Mr M&#39;, email: &#39;jmortensen@powayusd.com&#39;, classOf: 1977, role: &#39;Teacher&#39; }, Person { name: &#39;Krish Patil&#39;, email: &#39;krishpatil1019@gmail.com&#39;, classOf: 2024, role: &#39;Student&#39; }, Person { name: &#39;Don Tran&#39;, email: &#39;donqt15@gmail.com&#39;, classOf: 2024, role: &#39;Student&#39; }, Person { name: &#39;Nathan Manango&#39;, email: &#39;prorichyman@gmail.com&#39;, classOf: 2024, role: &#39;Student&#39; }, Person { name: &#39;Nicholas Ramos&#39;, email: &#39;unknown&#39;, classOf: 2024, role: &#39;Student&#39; } ] string ; Mr M string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jmortensen@powayusd.com&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} object ; { name: &#39;Mr M&#39;, ghID: &#39;jmortensen@powayusd.com&#39;, classOf: 1977, role: &#39;Teacher&#39; } . Classroom.prototype._toHtml = function() { var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid white;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em black;&quot; ); var body = &quot;&quot;; body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Email&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; for (var row of compsci.classroom) { body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.email + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;tr&gt;&quot;; } return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; $$.html(compsci._toHtml()); . NameEmailClass OfRole . Mr M | jmortensen@powayusd.com | 1977 | Teacher | Krish Patil | krishpatil1019@gmail.com | 2024 | Student | Don Tran | donqt15@gmail.com | 2024 | Student | Nathan Manango | prorichyman@gmail.com | 2024 | Student | Nicholas Ramos | unknown | 2024 | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/pbl/2022/09/25/javascript-data.html",
            "relUrl": "/pbl/2022/09/25/javascript-data.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Fibonacci Algorithm",
            "content": "Fibo Class . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result long executionTime; /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { final long startTime = System.nanoTime(); this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); this.executionTime = System.nanoTime() - startTime; } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } System.out.println(&quot;Init method runtime = &quot; + this.executionTime); } static class FiboFor extends Fibo { public FiboFor() { super(20); } public FiboFor(int n) { super(n); } @Override protected void init() { final long startTime = System.nanoTime(); this.name = &quot;For&quot;; long[] numbers = {0, 1}; for (int i = 0; i &lt; this.size; i++) { this.setData(numbers[0]); numbers = new long[] {numbers[1], numbers[0] + numbers[1]}; } this.executionTime = System.nanoTime() - startTime; } } // While-loop implementation static class FiboWhile extends Fibo { public FiboWhile() { super(20); } public FiboWhile(int n) { super(n); } @Override protected void init() { final long startTime = System.nanoTime(); this.name = &quot;While&quot;; long[] numbers = {0, 1}; int i = 0; while (i &lt; this.size) { this.setData(numbers[0]); numbers = new long[] {numbers[1], numbers[0] + numbers[1]}; i++; } this.executionTime = System.nanoTime() - startTime; } } // Recursion impelmentation static class FiboRecursion extends Fibo { public FiboRecursion() { super(20); } public FiboRecursion(int n) { super(n); } @Override protected void init() { final long startTime = System.nanoTime(); this.name = &quot;Recursion&quot;; int counter = 0; long[] numbers = {0, 1}; increment(numbers, counter); this.executionTime = System.nanoTime() - startTime; } public void increment(long[] numbers, int counter) { this.setData(numbers[0]); if (counter &lt; this.size - 1) { numbers = new long[] {numbers[1], numbers[0] + numbers[1]}; increment(numbers, counter + 1); } } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { Fibo fib = new Fibo(); fib.print(); FiboFor test1 = new FiboFor(); this.executionTime = System.nanoTime() - startTime; test1.print(); FiboWhile test2 = new FiboWhile(); test2.print(); FiboRecursion test3 = new FiboRecursion(); test3.print(); } } Fibo.main(null); . Init method = Stream fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] Init method runtime = 1918708 Init method = For fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] Init method runtime = 23292 Init method = While fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] Init method runtime = 28208 Init method = Recursion fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] Init method runtime = 27917 .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/college%20board/2022/09/24/Fibonacci.html",
            "relUrl": "/college%20board/2022/09/24/Fibonacci.html",
            "date": " • Sep 24, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Title",
            "content": "",
            "url": "https://prorichyman.github.io/CSA-Fastpages/2022/09/19/iteration.html",
            "relUrl": "/2022/09/19/iteration.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "FRQ Notebook",
            "content": "FRQ . This question involves reasoning about a simulation of a frog hopping in a straight line. The frog attempts to hop to a goal within a specified number of hops. The simulation is encapsulated in the following FrogSimulation class. You will write two of the methods in this class. . public class FrogSimulation { /** Distance, in inches, from the starting position to the goal. */ private int goalDistance; /** Maximum number of hops allowed to reach the goal. */ private int maxHops; /** Constructs a FrogSimulation where dist is the distance, in inches, from the starting * position to the goal, and numHops is the maximum number of hops allowed to reach the goal. * Precondition: dist &gt; 0; numHops &gt; 0 */ public FrogSimulation(int dist, int numHops){ goalDistance = dist; maxHops = numHops; } /** Returns an integer representing the distance, in inches, to be moved when the frog hops. */ private int hopDistance(){ /* implementation not shown */ } /** Simulates a frog attempting to reach the goal as described in part (a). * Returns true if the frog successfully reached or passed the goal during the simulation; * false otherwise. */ public boolean simulate(){ /* to be implemented in part (a) */ } /** Runs num simulations and returns the proportion of simulations in which the frog * successfully reached or passed the goal. * Precondition: num &gt; 0 */ public double runSimulations(int num){ /* to be implemented in part (b) */ } --&gt; } . Complete method simulate below. You must use hopDistance appropriately to receive full credit. . /** Simulates a frog attempting to reach the goal as described in part (a). . Returns true if the frog successfully reached or passed the goal during the simulation; | false otherwise. */ . public boolean simulate() . | . public boolean simulate(){ int h = 0; for(int i=0; i &lt; numHops; i++){ int h += hopDistance(); if(h &gt;= goalDistance){ return true; } else if(h &lt; 0){ return false; } } return false; } . Write the runSimulations method, which performs a given number of simulations and returns the proportion of simulations in which the frog successfully reached or passed the goal. For example, if the parameter passed to runSimulations is 400, and 100 of the 400 simulate method calls returned true, then the runSimulations method should return 0.25. Complete method runSimulations below. Assume that simulate works as specified, regardless of what you wrote in part (a). You must use simulate appropriately to receive full credit. /** Runs num simulations and returns the proportion of simulations in which the frog . * successfully reached or passed the goal. * Precondition: num &gt; 0 */ . public double runSimulations(int num) . public double runSimulations(int num){ double value = 0; for(int i=0; i &gt; num; i++){ boolean number = simulate(); if(number == true){ value += 1; } } value = value/num; return value } .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/codecodecode/2022/09/16/frq.html",
            "relUrl": "/codecodecode/2022/09/16/frq.html",
            "date": " • Sep 16, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Iteration Mini Lab - The Aquarium",
            "content": "Iteration Using 2D Arrays vs Iteration Using Objects . Iteration is especially useful when going through long lists of items. Two instances of this could be iterating through a 2D Array which in this case is an array of an array of strings which allows me to create rows and columns for each of my ASCII art pieces, or a 1D array of Objects who&#39;s properties include a 1D array of strings that make up my ASCII art piece. . Let&#39;s see both of them in action: . Iteration Using 2D Arrays . Unlike the example in Mr. Mort&#39;s blog, I&#39;ll be using an aquarium and slightly edited version of the monkeys jumping on the bed rhyme and be putting them horizontally as opposed to vertically. . public class Aquarium{ //Instantiate a 2D Array (made of columns and rows) like a grid String [][] aquarium; //Constructor (&quot;Builds&quot; (Constructs) aquarium in this example) public Aquarium(){ aquarium = new String[][]{ { &quot; / &quot;, &quot; _/./ &quot;, &quot; ,-&#39; `-:..-&#39;/ &quot;, &quot;: o ) _ ( &quot;, &quot; `-....,--; `-. &quot;, &quot; `&#39; &quot;, &quot; &quot;, &quot; &quot; }, { &quot; /`·.¸ &quot;, &quot; /¸...¸`:· &quot;, &quot; ¸.·´ ¸ `·.¸.·´) &quot;, &quot;: © ):´; ¸ { &quot;, &quot; `·.¸ `· ¸.·´ `·¸)&quot;, &quot; ` ´´ ¸.·´ &quot;, &quot; &quot;, &quot; &quot; }, { &quot; | o &quot;, &quot; | o &quot;, &quot;| / . o &quot;, &quot;| | ( &quot;, &quot;|/ / &quot;, &quot; | / &quot;, &quot; |/ &quot;, &quot; &quot; }, { &quot; ___ &quot;, &quot; _ / __)_ ° &quot;, &quot; _ .&#39;_&#39;-&#39; /-&#39;-. o ° &quot;, &quot; &#39;-._.&#39;-&#39; / _ -(O)_: O &quot;, &quot; (__ /_ &#39;._) _ o &quot;, &quot; /.&#39; (_.&#39;-&#39;&#39;./&#39; &quot;, &quot; &#39; &quot;, &quot; &quot; }, { &quot; ____ &quot;, &quot; / &quot;, &quot; /-./ &quot;, &quot;/ o /| &quot;, &quot;&gt; | &quot;, &quot; &lt;) / | &quot;, &quot; -&#39; &quot;, &quot; ____/ &quot; } }; } public void print(){ System.out.println(); System.out.println(&quot;The Sea Aquarium&quot;); int aquariumCount = aquarium.length; for (int i = aquariumCount; i &gt; 0; i--){ System.out.println(i + &quot; Little fishies swimming in the sea...&quot;); for (int col = 0; col &lt; aquarium[0].length; col++){ for (int row = 0; row &lt; i; row++){ System.out.print(aquarium[row][col] + &quot; t&quot;); } System.out.println(); } System.out.println(&quot;A shark gobbled up one in a spree&quot;); System.out.println(&quot;The employee called the manager and the manager said, &quot;); System.out.println(&quot;&#39;No more sharks swimming in the sea!&#39;&quot;); System.out.println(&quot; n-- n&quot;); aquariumCount -= 1; } System.out.println(&quot;No more fishies living in the sea :( n&quot;); System.out.println(&quot;--&quot;); System.out.println(&quot; THE END &quot;); } public static void main(String[] args) { new Aquarium().print(); } } Aquarium.main(null); . The Sea Aquarium 5 Little fishies swimming in the sea... / /`·.¸ | o ___ ____ _/./ /¸...¸`:· | o _ / __)_ ° / ,-&#39; `-:..-&#39;/ ¸.·´ ¸ `·.¸.·´) | / . o _ .&#39;_&#39;-&#39; /-&#39;-. o ° /-./ : o ) _ ( : © ):´; ¸ { | | ( &#39;-._.&#39;-&#39; / _ -(O)_: O / o /| `-....,--; `-. `·.¸ `· ¸.·´ `·¸) |/ / (__ /_ &#39;._) _ o &gt; | `&#39; ` ´´ ¸.·´ | / /.&#39; (_.&#39;-&#39;&#39;./&#39; &lt;) / | |/ &#39; -&#39; ____/ A shark gobbled up one in a spree The employee called the manager and the manager said, &#39;No more sharks swimming in the sea!&#39; -- 4 Little fishies swimming in the sea... / /`·.¸ | o ___ _/./ /¸...¸`:· | o _ / __)_ ° ,-&#39; `-:..-&#39;/ ¸.·´ ¸ `·.¸.·´) | / . o _ .&#39;_&#39;-&#39; /-&#39;-. o ° : o ) _ ( : © ):´; ¸ { | | ( &#39;-._.&#39;-&#39; / _ -(O)_: O `-....,--; `-. `·.¸ `· ¸.·´ `·¸) |/ / (__ /_ &#39;._) _ o `&#39; ` ´´ ¸.·´ | / /.&#39; (_.&#39;-&#39;&#39;./&#39; |/ &#39; A shark gobbled up one in a spree The employee called the manager and the manager said, &#39;No more sharks swimming in the sea!&#39; -- 3 Little fishies swimming in the sea... / /`·.¸ | o _/./ /¸...¸`:· | o ,-&#39; `-:..-&#39;/ ¸.·´ ¸ `·.¸.·´) | / . o : o ) _ ( : © ):´; ¸ { | | ( `-....,--; `-. `·.¸ `· ¸.·´ `·¸) |/ / `&#39; ` ´´ ¸.·´ | / |/ A shark gobbled up one in a spree The employee called the manager and the manager said, &#39;No more sharks swimming in the sea!&#39; -- 2 Little fishies swimming in the sea... / /`·.¸ _/./ /¸...¸`:· ,-&#39; `-:..-&#39;/ ¸.·´ ¸ `·.¸.·´) : o ) _ ( : © ):´; ¸ { `-....,--; `-. `·.¸ `· ¸.·´ `·¸) `&#39; ` ´´ ¸.·´ A shark gobbled up one in a spree The employee called the manager and the manager said, &#39;No more sharks swimming in the sea!&#39; -- 1 Little fishies swimming in the sea... / _/./ ,-&#39; `-:..-&#39;/ : o ) _ ( `-....,--; `-. `&#39; A shark gobbled up one in a spree The employee called the manager and the manager said, &#39;No more sharks swimming in the sea!&#39; -- No more fishies living in the sea :( -- THE END . Iteration Using Objects . Now let&#39;s see this example but in the form of objects! Because the static key word, I can create a class for just the fish alone which creates fish objects and also perform methods. In this sense, the class has universal methods which can be called to do something to the objects it (the class) created. It&#39;s pretty crazy cool. . By using OOP, the fishes are far easier to replicate and I can even give them other properties such as names, age, type etc. So, unlike iteration using purely 2D arrays, each fish I make can have unique properties. Both of them however are relatively easy to expand the list that the print function iterates through. However, OOP makes it far easier to manipulate the data of the fishes and the list that is iterated through. . import java.util.ArrayList; public class AquariumFish{ //Instantiates a static array list of fish objects (belongs to class) static ArrayList&lt;AquariumFish&gt; fishesList = new ArrayList&lt;AquariumFish&gt;(); // Stores individual fishes (the strings that make up the fish) for each object String[] fish; // Name of each fish String name; //Constructor which takes the string array of fish and the name of each fish as arguments public AquariumFish(String[] fish, String name) { this.fish = fish; //body this.name = name; //name fishesList.add(this); } public static void print(){ System.out.println(); System.out.println(&quot;The Sea Aquarium&quot;); int aquariumCount = fishesList.size(); for (int i = aquariumCount; i &gt; 0; i--){ System.out.println(i + &quot; Little fishies swimming in the sea...&quot;); for (int col = 0; col &lt; fishesList.get(0).fish.length; col++){ for (int row = 0; row &lt; i; row++){ System.out.print(fishesList.get(row).fish[col] + &quot; t&quot;); } System.out.println(); } System.out.println(&quot;A shark gobbled up &quot; + fishesList.get(i-1).name + &quot; in a spree&quot;); System.out.println(&quot;The employee called the manager and the manager said, &quot;); System.out.println(&quot;&#39;No more sharks swimming in the sea!&#39;&quot;); System.out.println(&quot; n-- n&quot;); aquariumCount -= 1; } System.out.println(&quot;No more fishies living in the sea :( n&quot;); System.out.print(&quot;Poor &quot;); for (int i = AquariumFish.fishesList.size(); i &gt; 0; i--){ System.out.print(AquariumFish.fishesList.get(i-1).name + &quot; &quot;); } System.out.println(&quot;did not survive.&quot;); System.out.println(&quot;--&quot;); System.out.println(&quot; THE END &quot;); } public static void main(String[] args) { AquariumFish fish0 = new AquariumFish(new String[]{ &quot; / &quot;, // Argument for Fish Body &quot; _/./ &quot;, &quot; ,-&#39; `-:..-&#39;/ &quot;, &quot;: o ) _ ( &quot;, &quot; `-....,--; `-. &quot;, &quot; `&#39; &quot;, &quot; &quot;, &quot; &quot; }, &quot;Ing&quot;); // Argumentfor Fish Name AquariumFish fish1 = new AquariumFish(new String[]{ &quot; /`·.¸ &quot;, &quot; /¸...¸`:· &quot;, &quot; ¸.·´ ¸ `·.¸.·´) &quot;, &quot;: © ):´; ¸ { &quot;, &quot; `·.¸ `· ¸.·´ `·¸)&quot;, &quot; ` ´´ ¸.·´ &quot;, &quot; &quot;, &quot; &quot; }, &quot;Groov&quot;); AquariumFish fish2 = new AquariumFish(new String[]{ &quot; | o &quot;, &quot; | o &quot;, &quot;| / . o &quot;, &quot;| | ( &quot;, &quot;|/ / &quot;, &quot; | / &quot;, &quot; |/ &quot;, &quot; &quot; }, &quot;In&quot;); AquariumFish fish3 = new AquariumFish(new String[]{ &quot; ___ &quot;, &quot; _ / __)_ ° &quot;, &quot; _ .&#39;_&#39;-&#39; /-&#39;-. o ° &quot;, &quot; &#39;-._.&#39;-&#39; / _ -(O)_: O &quot;, &quot; (__ /_ &#39;._) _ o &quot;, &quot; /.&#39; (_.&#39;-&#39;&#39;./&#39; &quot;, &quot; &#39; &quot;, &quot; &quot; }, &quot;Jam&quot;); AquariumFish fish4 = new AquariumFish(new String[]{ &quot; ____ &quot;, &quot; / &quot;, &quot; /-./ &quot;, &quot;/ o /| &quot;, &quot;&gt; | &quot;, &quot; &lt;) / | &quot;, &quot; -&#39; &quot;, &quot; ____/ &quot; }, &quot;Ben&quot;); AquariumFish.print(); } } AquariumFish.main(null); . The Sea Aquarium 5 Little fishies swimming in the sea... / /`·.¸ | o ___ ____ _/./ /¸...¸`:· | o _ / __)_ ° / ,-&#39; `-:..-&#39;/ ¸.·´ ¸ `·.¸.·´) | / . o _ .&#39;_&#39;-&#39; /-&#39;-. o ° /-./ : o ) _ ( : © ):´; ¸ { | | ( &#39;-._.&#39;-&#39; / _ -(O)_: O / o /| `-....,--; `-. `·.¸ `· ¸.·´ `·¸) |/ / (__ /_ &#39;._) _ o &gt; | `&#39; ` ´´ ¸.·´ | / /.&#39; (_.&#39;-&#39;&#39;./&#39; &lt;) / | |/ &#39; -&#39; ____/ A shark gobbled up Ben in a spree The employee called the manager and the manager said, &#39;No more sharks swimming in the sea!&#39; -- 4 Little fishies swimming in the sea... / /`·.¸ | o ___ _/./ /¸...¸`:· | o _ / __)_ ° ,-&#39; `-:..-&#39;/ ¸.·´ ¸ `·.¸.·´) | / . o _ .&#39;_&#39;-&#39; /-&#39;-. o ° : o ) _ ( : © ):´; ¸ { | | ( &#39;-._.&#39;-&#39; / _ -(O)_: O `-....,--; `-. `·.¸ `· ¸.·´ `·¸) |/ / (__ /_ &#39;._) _ o `&#39; ` ´´ ¸.·´ | / /.&#39; (_.&#39;-&#39;&#39;./&#39; |/ &#39; A shark gobbled up Jam in a spree The employee called the manager and the manager said, &#39;No more sharks swimming in the sea!&#39; -- 3 Little fishies swimming in the sea... / /`·.¸ | o _/./ /¸...¸`:· | o ,-&#39; `-:..-&#39;/ ¸.·´ ¸ `·.¸.·´) | / . o : o ) _ ( : © ):´; ¸ { | | ( `-....,--; `-. `·.¸ `· ¸.·´ `·¸) |/ / `&#39; ` ´´ ¸.·´ | / |/ A shark gobbled up In in a spree The employee called the manager and the manager said, &#39;No more sharks swimming in the sea!&#39; -- 2 Little fishies swimming in the sea... / /`·.¸ _/./ /¸...¸`:· ,-&#39; `-:..-&#39;/ ¸.·´ ¸ `·.¸.·´) : o ) _ ( : © ):´; ¸ { `-....,--; `-. `·.¸ `· ¸.·´ `·¸) `&#39; ` ´´ ¸.·´ A shark gobbled up Groov in a spree The employee called the manager and the manager said, &#39;No more sharks swimming in the sea!&#39; -- 1 Little fishies swimming in the sea... / _/./ ,-&#39; `-:..-&#39;/ : o ) _ ( `-....,--; `-. `&#39; A shark gobbled up Ing in a spree The employee called the manager and the manager said, &#39;No more sharks swimming in the sea!&#39; -- No more fishies living in the sea :( Poor Ben Jam In Groov Ing did not survive. -- THE END .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/pbl/college%20board/oop/week%204/2022/09/15/iteration-mini-lab.html",
            "relUrl": "/pbl/college%20board/oop/week%204/2022/09/15/iteration-mini-lab.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "If Else Statements and Boolean Logic",
            "content": "Booleans . Booleans are one of the primitive data types that Java supports and are an integral data type to all of computer science. In fact, it&#39;s the idea of booleans that actually makes up an integral part of computers which we know as 0s and 1s (on or off) which in computer speak is called binary. . Established by 19th century mathematician George Bool, booleans are at its core data for logic simply put in two types: true or false. With this you can create a complex structure of computing code and all other manners of code. . Let&#39;s see how they are when we assign them as variables! . boolean a = true; boolean b = false; System.out.println(&quot;variable a: &quot; + a + &quot; nvariable b: &quot; + b); . variable a: true variable b: false . Boolean Operators . Booleans, interestingly enough, have operators to them just as math does. The most common operators you&#39;ll hear about are the comparison operators: and (&amp;&amp;), or (||), &gt;, &lt;, &gt;=, &lt;=, ==. Another common operator is not (!). . The and operator compares two boolean statements and if both are true, then it will return true, otherwise all other combinations of the boolean statements return false. . The or operator also compares two boolean statements and if one of them is true, it returns true while if both of them is false, it will return false. . The not operator is applied to a boolean statement and switches true to false and false to true. . Let&#39;s see them in action! . // examples of some of the operators boolean a = true &amp;&amp; true; boolean b = false &amp;&amp; true; boolean c = 100 &lt; 150; boolean d = 20 &gt;= 1; boolean e = !b; boolean f = false || true; System.out.println(&quot;variable a: &quot; + a + &quot; nvariable b: &quot; + b + &quot; nvariable c: &quot; + c + &quot; nvariable d: &quot; + d + &quot; nvariable e: &quot; + e + &quot; nvariable f: &quot; + f); . variable a: true variable b: false variable c: true variable d: true variable e: true variable f: true . If and Else Statements . If statements are, at their core, statements that check the conditions of true or false. If a condition is true, it will perform an action/line of code, if it is false, it will skip over the action/code block under the if statement. . An Else statements is an action/code block that performs if the condition for the if statement is not true. . An Else If statement is a combination of If and Else statements where if a condition is not true, it will move into the else statement which has another if statement. At its core. it is a nested If Else statement. . Let&#39;s see them in action. . int a = 11; int b = 6; int c = 9; if (a &gt; b){ //since a is greater than c, the else statement is ignored if (a &lt; c){ System.out.println(&quot;c is the largest number&quot;); } else{ //since a is greater than c, the else statement&#39;s code block is called because the if statement is false System.out.println(&quot;a is the largest number&quot;); } } else{ if (b &lt; c){ System.out.println(&quot;c is the largest number&quot;); } else{ System.out.println(&quot;b is the largest number&quot;); } } . a is the largest number . Switch Case Statements . Switch Case Statements help simplify/manage the complexity of if else statements which can in many circumstance become overly long especially when comparing by a case by case basis. . It works by stating a variety of Case statements which all have conditions. The code blocks under each case are then run if the condition to one of the cases is met. Just like if else statements, Switch Case statements will go down each case to see if a conditon is met. If it is met, the case&#39;s block of code will run and ignore the rest of the Switch Case statements. . In the examples below, the first will be a chain of If Else statements while the second example will use switch case to demonstrate how Switch Case statements simplify multiple If Else statements. . int n = 7; if (n == 4){ System.out.println(&quot;4 is considered unlucky in Japan because of its pronounciation&#39;s (shi) similarity to the word for death.&quot;); } else if (n == 7){ System.out.println(&quot;7 is considered lucky in many cultures because its believed to be associated with its propagation as a positive value in folklores and myths.&quot;); } else if (n == 8){ System.out.println(&quot;8 is considered a lucky number in China and Japan because of its relation to the word for prosperity in their cultures.&quot;); } else if (n == 9){ System.out.println(&quot;9 is considered unlucky in both China and Japan because both associate it with the word for sorrow, grief, and suffering.&quot;); } else if (n == 13){ System.out.println(&quot;13 is considered unlucky in Western society due to its association with the Christian Bible where the 13th to sit at the Last Supper was Judas who is known as the betrayer of Jesus Christ.&quot;); } . 7 is considered lucky in many cultures because its believed to be associated with its propagation as a positive value in folklores and myths. . int n = 7; String output; switch (n){ //variable passed in case 4: //condition checked if equals output = &quot;4 is considered unlucky in Japan because of its pronounciation&#39;s (shi) similarity to the word for death.&quot;; break; case 7: output = &quot;7 is considered lucky in many cultures because its believed to be associated with its propagation as a positive value in folklores and myths.&quot;; break; case 8: output = &quot;8 is considered a lucky number in China and Japan because of its relation to the word for prosperity in their cultures.&quot;; break; case 9: output = &quot;9 is considered unlucky in both China and Japan because both associate it with the word for sorrow, grief, and suffering.&quot;; break; case 13: output = &quot;13 is considered unlucky in Western society due to its association with the Christian Bible where the 13th to sit at the Last Supper was Judas who is known as the betrayer of Jesus Christ.&quot;; break; } System.out.println(output); . 7 is considered lucky in many cultures because its believed to be associated with its propagation as a positive value in folklores and myths. . De Morgan&#39;s Law . De Morgan&#39;s Law states that in a boolean statement, the not operator ! will reverse all the operators in that statement. For instance, true becomes false, false becomes true, and becomes or, or becomes and, &gt; becomes &lt;=, &lt;= becomes &gt;, etc. A tangible example of this is &#39;I will not drink water and eat a table&#39; which means the same thing as &#39;I will either not drink water or eat a table.&#39; . Here&#39;s some examples! . boolean a = true; boolean b = true; . if (!(A &amp;&amp; B)){ System.out.println(&quot;A and B both are false&quot;); } else{ System.out.println(&quot;A and B are true&quot;); } . A and B are true . if (!A || !B){ System.out.println(&quot;A and B both are false&quot;); } else{ System.out.println(&quot;A and B are true&quot;); } . A and B are true . As shown above, both statements are equal given De Morgan&#39;s Law. It&#39;s important because of how they can break inversions as a complement of a complex boolean expression. .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/pbl/2022/09/12/boolean.html",
            "relUrl": "/pbl/2022/09/12/boolean.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Focus / Habits",
            "content": "Interests and Skills . Week Accomplishments : AWS server completion, watched Yale Video and reflected, completed lesson on booleans Goals : Try to finish everything before the weekend because I have vacation and will not be able to complete other than during the week . Interests: CS (Likely front end, or game development), Biomed, Nursing ( Anesthesiology, or smthn else ) . Skills: CS - Python, CSS, Java (beginner), JavaScript Biomed - Concussion certification, know most muscles and bones, can identify certain tumors Nursing - I have parents that are good at it . Yale Video . Laurie Santos’s speach on her new course in Yale Psychology and the Good Life talks about a lot of the mental struggles and stress that students both in college and even in high school, middle schools, and elementary schools face as a result of the pressures of placed upon them by themselves, their parents, their teachers, and even society’s norms and expectations. . Here at Del Norte, almost all of the teacher I know complain in one form or another that student culture is very pushy towards taking APs and high level academic classes. Lot’s of times, just as Santos surveyed, I find that I, and many of my other peers, struggle to actually effectively learn other arguably more important skills and overly burden ourselves. This comes in the form of practical struggles which we’ll face in our adulthood such as independence, communication, and mental coping. In turn, we also over look many of the arguably more happier and fulfilling aspects of our lives. . In my opinion, much of this stress in high school is the result of expectations of going to college. Look at Europe for instance, although it’s cliche to compare American and European institutions, it is undeniable that most European students are relatively far more laxed in getting into university and studying in university. The rigor and academic load is still relatively the same but most of the students find themselves far less pressured than their American counterparts. . To achieve and recognize some of this happiness, learning and applying the methods to make one happy is essential. Letting go of some excessive or unnecessary expectations can often go a long way towards seeing the fulfilling aspects of our lives. . Among some really important practices she lists are: adequate sleep, time to appreciate and acknowledge gratitude (both self and outside), meditation, exercise, breaks. All of these are practices that can go a long way towards creating a healthier and ultimately more fulfilling life. . There’s definitely a lot more especially her insights regarding her course material and how to live fulfilling lives but I think that can be something I blog another time and watch in my own time to let sink in. . Goals in coding . Applying the mindset that Santos’s speach sort of brings to light, I think as I code, I definitely want to keep in mind that I shouldn’t be coding for the sake of a grade but rather I should be coding to develop my interest within the field and seeing its applications as a powerful tool in my life and society. The most important goal I have is being able to use CSA as a way not only to learn AP CSA material for the AP Exam, but also the best practices of coding, how to become a good programmer, and developing my creativity as one. This especially ties into the Alumni panel, where even if I don’t go into a CS related major, it will still be in good interest to do good in this class. .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/keytakeaways/2022/09/11/personal.html",
            "relUrl": "/keytakeaways/2022/09/11/personal.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "PBL Progress 1",
            "content": "Our Progress . Woooo so far we’ve created only a basic calculator but we’re hoping to expand upon that when we can. So far we have two versions of a basic calculator, each with its own limitations. . Desktop Application Calculator (Krish and Nicky) . &lt;img width=“495” alt=“image” src=“https://user-images.githubusercontent.com/75715248/188583403-d22f1fd1-2c42-4cca-b27b-a6dd0ec2da03.png”&gt; Krish and Nicky worked together to set up a Desktop GUI that implemented a calculator using JFrame and Springboot. At its core, it simply takes two numbers which the user inputs and a function that the user specifies to perform a mathematical operation and output the value. Some limitations include: a lack of practical usability as a UI, limits to only two numbers being computed at a time, only one operator/function being able to be used at a time. Some pros include: a clean GUI that is accurate and does not need to interface with Spring’s web application programs, can perform relatively complex mathematical operations due to its ease of accessibility to Java’s math library. Some improvements: preferably a better GUI that gives the user a better range of options, maybe more operations, performing multiple operations at a time . Web Browser Application (Don and Nathan) . &lt;img width=“1440” alt=“image” src=“https://user-images.githubusercontent.com/75715248/188583668-d4d07a5f-70f1-46bc-9a99-e211d673e2e6.png”&gt; Don and Nathan worked together to set up a Web Browser Application that works as a very basic calculator that takes a string as an input. It then performs the operations it sees in the string on each of the values. It uses Spring Boot and MVC to interface the html output with the actual logic Some limitations include: a disregard for order of operations, very specific syntax has to be used most of the time or else it wont output at all or will output what the user outputted, its limited only to the four basic operations, the GUI only has a string user input and an = sign button that functions. Some pros include: it can perform multiple operations at a time, has a functioning GUI that is clean, runs on a web browser, is easy to visualize Some improvements include: Creating functioning buttons in its GUI, accounting for order of operations (likely to try to use tree data structure in order to implement this), more operators and functions . Future Work . To make a well made calculator and preferably to expand it as a tool to help with math problems, we’re likely to move towards the web development side of Spring Boot. It’s tools provide a relatively straightforward method to putting our java programs onto a web browser through its boiler plate code and hopefully that should enable us to focus mainly on the functionality of our web. Through this, we learned how to use JFRame and also understand how Spring Boot uses MVC to build a webpage using mostly HTML and Java files. .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/pbl/2022/09/06/group.html",
            "relUrl": "/pbl/2022/09/06/group.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Innovation - Objects",
            "content": "Code.org . Link to Code.org Proof . Java Objects . Link to Objects Notebook . Extra . Collaborative Issue | Worked with Don on Spring Calculator | Worked on HTML portion of html | .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/keytakeaways/2022/09/05/objects.html",
            "relUrl": "/keytakeaways/2022/09/05/objects.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Objects Notebook",
            "content": "// imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // CLASS DEFINED // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object ( INSTANCE ) this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Say Hello&quot;); System.out.println(&quot;2 - Output colors&quot;); System.out.println(&quot;3 - Loading in color&quot;); System.out.println(&quot;4 - Salary Calculator&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } private void salaryCalculator(){ Scanner myObj = new Scanner(System.in); // Create a Scanner object ( INSTANCE ) System.out.println(&quot;Enter a salary between 0-1,000,000&quot;); // Number 1, gets salary double salary = myObj.nextDouble(); // Read user input System.out.println(salary); double oldSalary = salary; // records oldsalary for percent calculation later System.out.println(&quot;Enter your pay raise&quot;); // Number 2, gets raise to salary double raise = myObj.nextDouble(); // Read user input System.out.println(raise); salary += raise; // the inputted number of &quot;raise&quot; is added onto the original inputted &quot;salary&quot; int randomnum = (int)(Math.random() * 100); // use of math.random() salary += randomnum; // use of math.random to add random number into salary value int percent = (int) (100*(salary / oldSalary)-100); // calculates percent raise myObj.close(); // closing object, stops reading text inputs boolean payraisequality; // defines boolean variable String message; // defines message if(percent &gt; 5){ payraisequality = true; } else{ payraisequality = false; } if (payraisequality == true){ message = &quot;You got a good pay raise!&quot;; } else{ message = &quot;You got a bad pay raise.&quot;; } System.out.println(&quot;Your final salary, with an added random number, is: &quot; + salary + &quot;, which is around a &quot; + percent + &quot;% raise from your original salary. &quot; + message); // Output user input } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.print(&quot;Hello, World!&quot;); break; case 2: for(int i = 0; i &lt; COLORS.length; i++) // loop through COLORS array System.out.print(COLORS[i][ANSI] + COLORS[i][NAME]); break; case 3: System.out.print(&quot;Loading...&quot;); for (int i = 0; i &lt; 20; i++) { // fixed length loading bar int random = (int) (Math.random() * COLORS.length); // random logic (CHANGING FROM A DOUBLE TO AN INTEGER) try { Thread.sleep(100); // delay for loading } catch (Exception e) { System.out.println(e); } System.out.print(COLORS[random][ANSI] + &quot;#&quot;); } break; case 4: salaryCalculator(); // (METHOD) break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object (METHOD) } } Menu.main(null); . - Choose from these choices - 1 - Say Hello 2 - Output colors 3 - Loading in color 4 - Salary Calculator 0 - Quit - 4: Enter a salary between 0-1,000,000 100.0 Enter your pay raise 2000.0 Your final salary, with an added random number, is: 2176.0, which is around a 2076% raise from your original salary. You got a good pay raise! 0: Goodbye, World! . College Board and CTE competences . Explain where a Class is defined . &quot;public class Menu{ &quot; | . Explain where an instances of a Class is defined . &quot;Scanner sc = new Scanner(System.in);&quot; | &quot;Scanner myObj = new Scanner(System.in);&quot; | . Explain where an object is Calling a Method . &quot;new Menu();&quot; | . Explain where an object is Mutating data . &quot;(CHANGING FROM A DOUBLE TO AN INTEGER)&quot; | .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/codecodecode/2022/09/05/menu.html",
            "relUrl": "/codecodecode/2022/09/05/menu.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Code.org Proof",
            "content": "Proof of Code.org . Link to code Segments + Explanations . .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/keytakeaways/2022/09/05/codeorg.html",
            "relUrl": "/keytakeaways/2022/09/05/codeorg.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "TEST PBL",
            "content": "PBL Features . Filler | .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/pbl/2022/08/29/testpbl.html",
            "relUrl": "/pbl/2022/08/29/testpbl.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "TEST Collegeboard Notes",
            "content": "Notes . Filler | .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/collegeboard/2022/08/29/testnotes.html",
            "relUrl": "/collegeboard/2022/08/29/testnotes.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "PBL",
            "content": "PBL Features . PBL Test | .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/pbl/2022/08/29/pbl.html",
            "relUrl": "/pbl/2022/08/29/pbl.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Collegeboard Notes",
            "content": "Collegeboard Unit Notes . Notes Test | .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/collegeboard/2022/08/29/collegeboard.html",
            "relUrl": "/collegeboard/2022/08/29/collegeboard.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Bash Notebook",
            "content": "Checking if Java and Anaconda are installed . echo &quot;Lets check if Java is installed&quot; java --version echo &quot;&quot; echo &quot;Lets check if Annaconda is installed&quot; conda list . Lets check if Java is installed java 18.0.2.1 2022-08-18 Java(TM) SE Runtime Environment (build 18.0.2.1+1-1) Java HotSpot(TM) 64-Bit Server VM (build 18.0.2.1+1-1, mixed mode, sharing) Lets check if Annaconda is installed # packages in environment at /Users/nathanmanangan/opt/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39hecd8cb5_1 aiohttp 3.8.1 py39hca72f7f_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39hecd8cb5_0 anaconda-navigator 2.1.4 py39hecd8cb5_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39hecd8cb5_0 appdirs 1.4.4 pyhd3eb1b0_0 applaunchservices 0.2.1 pyhd3eb1b0_0 appnope 0.1.2 py39hecd8cb5_1001 appscript 1.1.2 py39h9ed2024_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39hca72f7f_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39hecd8cb5_0 astropy 5.0.4 py39h67323c0_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39h9ed2024_0 beautifulsoup4 4.11.1 py39hecd8cb5_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39hca72f7f_0 bkcharts 0.2 py39hecd8cb5_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h2842e9f_0 bokeh 2.4.2 py39hecd8cb5_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39h67323c0_0 brotli 1.0.9 hb1e8313_2 brotlipy 0.7.0 py39h9ed2024_1003 brunsli 0.1 h23ab428_0 bzip2 1.0.8 h1de35cc_0 c-ares 1.18.1 hca72f7f_0 ca-certificates 2022.3.29 hecd8cb5_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39hecd8cb5_2 cffi 1.15.0 py39hc55c11b_1 cfitsio 3.470 hee0f690_6 chardet 4.0.0 py39hecd8cb5_1003 charls 2.2.0 h23ab428_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39hecd8cb5_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39hecd8cb5_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39hecd8cb5_0 conda-build 3.21.8 py39hecd8cb5_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39hca72f7f_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39h2fd3fbb_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 hca72f7f_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39he9d5cce_0 cytoolz 0.11.0 py39h9ed2024_0 daal4py 2021.5.0 py39h24a4e90_0 dal 2021.5.0 hecd8cb5_782 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39hecd8cb5_1 debugpy 1.5.1 py39he9d5cce_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39hecd8cb5_1 entrypoints 0.4 py39hecd8cb5_0 et_xmlfile 1.1.0 py39hecd8cb5_0 executing 0.8.3 pyhd3eb1b0_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 hd8bbffd_0 frozenlist 1.2.0 py39hca72f7f_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39hecd8cb5_1 gensim 4.1.2 py39he9d5cce_0 giflib 5.2.1 haf1e3a3_0 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h23ab428_2 gmpy2 2.1.2 py39hd5de756_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h9ed2024_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39hecd8cb5_0 greenlet 1.1.1 py39h23ab428_0 grpcio 1.42.0 py39ha29bfda_0 h5py 3.6.0 py39h4a1dd59_0 hdf5 1.10.6 hdbbcd12_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 h0a44026_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39ha952a84_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39hecd8cb5_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39hecd8cb5_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 hecd8cb5_3538 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39hecd8cb5_0 ipython 8.2.0 py39hecd8cb5_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39hecd8cb5_1 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e hca72f7f_0 jq 1.6 h9ed2024_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39hecd8cb5_0 jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 haf1e3a3_2 keyring 23.4.0 py39hecd8cb5_0 kiwisolver 1.3.2 py39he9d5cce_0 krb5 1.19.2 hcd88c3b_0 lazy-object-proxy 1.6.0 py39h9ed2024_0 lcms2 2.12 hf1fd2bf_0 lerc 3.0 he9d5cce_0 libaec 1.0.4 hb1e8313_1 libarchive 3.4.2 haa3ed63_0 libcrc32c 1.1.1 hb1e8313_2 libcurl 7.82.0 h6dfd666_0 libcxx 12.0.0 h2f01273_0 libdeflate 1.8 h9ed2024_5 libedit 3.1.20210910 hca72f7f_0 libev 4.33 h9ed2024_1 libffi 3.3 hb1e8313_2 libgfortran 3.0.1 h93005f0_2 libiconv 1.16 hca72f7f_2 libidn2 2.3.2 h9ed2024_0 liblief 0.11.5 he9d5cce_1 libllvm11 11.1.0 h46f1229_1 libnghttp2 1.46.0 ha29bfda_0 libpng 1.6.37 ha441bb4_0 libprotobuf 3.19.1 h8346a28_0 libsodium 1.0.18 h1de35cc_0 libspatialindex 1.9.3 h23ab428_0 libssh2 1.10.0 h0a4fc7d_0 libtiff 4.2.0 h87d7836_0 libunistring 0.9.10 h9ed2024_0 libwebp 1.2.2 h56c3ce4_0 libwebp-base 1.2.2 hca72f7f_0 libxml2 2.9.12 hcdb78fc_0 libxslt 1.1.34 h83b36ba_0 libzopfli 1.0.3 hb1e8313_0 llvm-openmp 12.0.0 h0dcd299_1 llvmlite 0.38.0 py39h8346a28_0 locket 0.2.1 py39hecd8cb5_2 lxml 4.8.0 py39h65b224f_0 lz4-c 1.9.3 h23ab428_1 lzo 2.10 haf1e3a3_2 markdown 3.3.4 py39hecd8cb5_0 markupsafe 2.0.1 py39h9ed2024_0 matplotlib 3.5.1 py39hecd8cb5_1 matplotlib-base 3.5.1 py39hfb0c5b7_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39hecd8cb5_1 mistune 0.8.4 py39h9ed2024_1000 mkl 2021.4.0 hecd8cb5_637 mkl-service 2.4.0 py39h9ed2024_0 mkl_fft 1.3.1 py39h4ab4a9b_0 mkl_random 1.2.2 py39hb2f4e1b_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h6ef4df4_1 mpfr 4.0.2 h9066e36_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39hecd8cb5_0 msgpack-python 1.0.2 py39hf7b0b51_1 multidict 5.2.0 py39hca72f7f_2 multipledispatch 0.6.0 py39hecd8cb5_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39hecd8cb5_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39hecd8cb5_0 nbconvert 6.4.4 py39hecd8cb5_0 nbformat 5.3.0 py39hecd8cb5_0 ncurses 6.3 hca72f7f_2 nest-asyncio 1.5.5 py39hecd8cb5_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 10.13.0 h0a44026_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.12 pypi_0 pypi numba 0.55.1 py39hae1ba45_0 numexpr 2.8.1 py39h2e5f0a9_0 numpy 1.21.5 py39h2e5f0a9_1 numpy-base 1.21.5 py39h3b1a694_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h9ed2024_0 openjpeg 2.4.0 h66ea3da_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n hca72f7f_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39he9d5cce_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39hecd8cb5_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39hecd8cb5_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 pathspec 0.7.0 py_0 patsy 0.5.2 py39hecd8cb5_1 pep8 1.7.1 py39hecd8cb5_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39hde71d04_0 pip 21.2.4 py39hecd8cb5_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39hecd8cb5_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39he9d5cce_0 psutil 5.8.0 py39h9ed2024_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39he9d5cce_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h9ed2024_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39hecd8cb5_0 pycurl 7.44.1 py39hbcfaee0_1 pydispatcher 2.0.5 py39hecd8cb5_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h9ed2024_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39hecd8cb5_0 pylint 2.9.6 py39hecd8cb5_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39he9d5cce_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h23ab428_6 pyrsistent 0.18.0 py39hca72f7f_0 pysocks 1.7.1 py39hecd8cb5_0 pytables 3.6.1 py39h648f197_1 pytest 7.1.1 py39hecd8cb5_0 python 3.9.12 hdfd78df_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h23ab428_3 python.app 3 py39hca72f7f_0 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39hca72f7f_0 pyyaml 6.0 py39hca72f7f_1 pyzmq 22.3.0 py39he9d5cce_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h468cd18_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39hecd8cb5_0 readline 8.1.2 hca72f7f_1 regex 2022.3.15 py39hca72f7f_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39hecd8cb5_1 ruamel_yaml 0.15.100 py39h9ed2024_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39hae1ba45_0 scikit-learn 1.0.2 py39hae1ba45_1 scikit-learn-intelex 2021.5.0 py39hecd8cb5_0 scipy 1.7.3 py39h8c7af03_0 scrapy 2.6.1 py39hecd8cb5_0 seaborn 0.11.2 pyhd3eb1b0_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39hecd8cb5_0 sip 4.19.13 py39h23ab428_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 he9d5cce_0 sniffio 1.2.0 py39hecd8cb5_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39hecd8cb5_1 spyder-kernels 2.1.3 py39hecd8cb5_0 sqlalchemy 1.4.32 py39hca72f7f_0 sqlite 3.38.2 h707629a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39hca72f7f_0 sympy 1.10.1 py39hecd8cb5_0 tabulate 0.8.9 py39hecd8cb5_0 tbb 2021.5.0 haf03e11_0 tbb4py 2021.5.0 py39haf03e11_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39hecd8cb5_0 terminado 0.13.1 py39hecd8cb5_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h7bc2e8c_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h9ed2024_0 tqdm 4.64.0 py39hecd8cb5_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39hca72f7f_0 typed-ast 1.4.3 py39h9ed2024_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39he9d5cce_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 haf1e3a3_0 urllib3 1.26.9 py39hecd8cb5_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h999c104_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39hecd8cb5_1 websocket-client 0.58.0 py39hecd8cb5_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h6dfd666_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39hecd8cb5_0 wrapt 1.12.1 py39h9ed2024_1 wurlitzer 3.0.2 py39hecd8cb5_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xlwings 0.24.9 py39hecd8cb5_0 xz 5.2.5 h1de35cc_0 yaml 0.2.5 haf1e3a3_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h9ed2024_0 zeromq 4.3.4 h23ab428_0 zfp 0.5.5 he9d5cce_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h4dc903c_2 zope 1.0 py39hecd8cb5_1 zope.interface 5.4.0 py39h9ed2024_0 zstd 1.4.9 h322a384_0 . Updating a repository . export repository=CSA-FASTPAGES export repo_main_folder=vscode cd $HOME/$repo_main_folder/CSA-FASTPAGES git fetch origin git pull origin master . remote: Enumerating objects: 168, done. remote: Counting objects: 100% (168/168), done. remote: Compressing objects: 100% (53/53), done. remote: Total 168 (delta 70), reused 163 (delta 65), pack-reused 0 Receiving objects: 100% (168/168), 52.67 KiB | 1.10 MiB/s, done. Resolving deltas: 100% (70/70), completed with 11 local objects. From https://github.com/ProRichyMan/CSA-Fastpages 9f5e7f3..c0f83ef gh-pages -&gt; origin/gh-pages From https://github.com/ProRichyMan/CSA-Fastpages * branch master -&gt; FETCH_HEAD Already up to date. . Doing some Installations . Automizes some of the installations, specifically git, python, and java! . arch -arm64 brew list arch -arm64 brew update arch -arm64 brew upgrade arch -arm64 brew install git arch -arm64 brew install python python --version arch -arm64 brew install java java --version javac --version . ==&gt; Formulae ca-certificates git openssl@1.1 readline xz gdbm mpdecimal pcre2 spring-boot gettext openjdk python@3.10 sqlite Updated 1 tap (homebrew/core). ==&gt; New Formulae ghorg linux-headers@5.15 shaderc kalign pymol swiftdraw ==&gt; Outdated Formulae openjdk You have 1 outdated formula installed. You can upgrade it with brew upgrade or list it with brew outdated. ==&gt; Upgrading 1 outdated package: openjdk 18.0.2 -&gt; 18.0.2.1 ==&gt; Downloading https://ghcr.io/v2/homebrew/core/openjdk/manifests/18.0.2.1 ######################################################################## 100.0% ==&gt; Downloading https://ghcr.io/v2/homebrew/core/openjdk/blobs/sha256:373ac8b65d ==&gt; Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/sh ######################################################################## 100.0% ==&gt; Upgrading openjdk 18.0.2 -&gt; 18.0.2.1 ==&gt; Pouring openjdk--18.0.2.1.arm64_monterey.bottle.tar.gz ==&gt; Caveats For the system Java wrappers to find this JDK, symlink it with sudo ln -sfn /opt/homebrew/opt/openjdk/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk.jdk openjdk is keg-only, which means it was not symlinked into /opt/homebrew, because macOS provides similar software and installing this software in parallel can cause all kinds of trouble. If you need to have openjdk first in your PATH, run: echo &#39;export PATH=&#34;/opt/homebrew/opt/openjdk/bin:$PATH&#34;&#39; &gt;&gt; ~/.zshrc For compilers to find openjdk you may need to set: export CPPFLAGS=&#34;-I/opt/homebrew/opt/openjdk/include&#34; ==&gt; Summary 🍺 /opt/homebrew/Cellar/openjdk/18.0.2.1: 642 files, 309MB ==&gt; Running `brew cleanup openjdk`... Disable this behaviour by setting HOMEBREW_NO_INSTALL_CLEANUP. Hide these hints with HOMEBREW_NO_ENV_HINTS (see `man brew`). Removing: /opt/homebrew/Cellar/openjdk/18.0.2... (642 files, 309MB) Removing: /Users/nathanmanangan/Library/Caches/Homebrew/openjdk--18.0.2... (180.3MB) Warning: git 2.37.2 is already installed and up-to-date. To reinstall 2.37.2, run: brew reinstall git Warning: python@3.10 3.10.6_1 is already installed and up-to-date. To reinstall 3.10.6_1, run: brew reinstall python@3.10 Python 3.9.12 Warning: openjdk 18.0.2.1 is already installed and up-to-date. To reinstall 18.0.2.1, run: brew reinstall openjdk java 18.0.2.1 2022-08-18 Java(TM) SE Runtime Environment (build 18.0.2.1+1-1) Java HotSpot(TM) 64-Bit Server VM (build 18.0.2.1+1-1, mixed mode, sharing) javac 18.0.2.1 . java --version python --version javac --version node --version . java 18.0.2.1 2022-08-18 Java(TM) SE Runtime Environment (build 18.0.2.1+1-1) Java HotSpot(TM) 64-Bit Server VM (build 18.0.2.1+1-1, mixed mode, sharing) Python 3.9.12 javac 18.0.2.1 v10.13.0 . Shows all of the kernels installed for Jupyter . jupyter kernelspec list . Available kernels: python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e /Users/nathanmanangan/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e python3912jvsc74a57bd063f284042fb87dad5a12beb55d64e6088ab71ccd3f72ccdf84694aa4fa281d07 /Users/nathanmanangan/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3912jvsc74a57bd063f284042fb87dad5a12beb55d64e6088ab71ccd3f72ccdf84694aa4fa281d07 bash /Users/nathanmanangan/Library/Jupyter/kernels/bash java /Users/nathanmanangan/Library/Jupyter/kernels/java javascript /Users/nathanmanangan/Library/Jupyter/kernels/javascript python3 /Users/nathanmanangan/opt/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/keylearnings/2022/08/29/bash.html",
            "relUrl": "/keylearnings/2022/08/29/bash.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Alumni Panel",
            "content": "People Intros . Colin - UCSD, Took CSP twice, taking mechanical engineering | Anthony Vo - UC Irvine, Majoring CS | Andrew - Took intro to CS, then CSA | Maybel - UCSD, Cognitive science, took 2 tris | Allison - UCLA, took CSP | Nitya - UCSD, CS major, took CSA, machine learning | . Questions . How did you realize you wanted to do your major and how did taking AP CSA/CSP help with that? Took CSP and realized that he wasn’t as good at CSP as he was at mechanical engineering, comparing to competitors | Intro class got him hooked, he just enjoyed it and it was fun | Take time to reflect on what you want to do | Programming/Scripting is still helpful for careers/majors even if it isn’t Computer Science directly | CSP gave technical skills and abilities to help, and solving real world problems | . | What is the biggest challenge you’ve encountered with computer science? Starting sucks, but there’s a solution there | Make google doc and import to | Don’t compare yourself with others, and focus on your own path to ensure you can stay on track | Theory is hard to learn | Motivation was hard, make sure you don’t cut corners and make checkboxes for points | . | Are there any PBL scenarios in College computer science classes? Problem solve on an actual project, which you will need to do eventually | PBL has a lot of correlation in CS | . | How have you applied CS in your major if you are not majoring in CS? You can still use coding in another major, which is very helpful for convenience and calculations | Higher level math courses, CS helps | Jupyter Notebooks are good for technical papers, and it can be a useful skill | Psychology + CS, frontend a lot, which has a lot of stats and math courses requirements | . | For existing college students, have you had a job with school or professor? Talking with teachers to try to stand out and be able to excel | A lot of these classes, CSA is helpful for applying for internships and jobs | . | Open Questions? Personal projects are useful for something to show that you know what you’re doing | Make connections for referrals and internships and jobs | Internships are useful for handson experience | . | Reflection . When I first took CSP, I was mostly lost, and wasn’t sure exactly how to code other than my basic knowledge on scratch. Slowly making progress in the class by copying others, which was counter productive, got me by the first few weeks. However, I knew I was expected to do my own work eventually, especially since I knew that if I wanted to pursue a path into computer science then it would take work. I realized this through my final project in CSP, where I knew my project wasn’t exactly the greatest, and Mr. Mortensen allowed me to realize this, yet still took pity on me and gave me a good score. Over the summer, I took a few classes to help support my learnings in CSP, which I believed would hopefully benefit me in CSA. . | Through the Alumni’s advice, I was able to reflect on my current path in school in taking the CSA course, and my path into the future. My perspective of CSP-CSA pathway, was simply just going down that typical CS major pathway. However, a big takeaway I learned through the Alumni panel was how useful the knowledge and technical skills CS taught them, which can still be used in a variety of different majors/careers. Although I took CSP and currently in CSA, I’m still uncertain if I will take CS as my major into college, but I am sure that I will be able to use the skills I have learned in Comp Sci in my future path. These types of skills have proved to be plenty useful even for me, like skills of presenting work properly, computational thinking skills in real life scenarios, keeping organized (VERY VERY USEFUL), and even just coding. I also learned that reaching out and building connections is especially useful when looking at job opportunities and looking for internships. CSA is useful for for more STEM and CS related connections, but you can still branch out with other things, which is very useful down the line. . | .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/keylearnings/2022/08/29/alumnipanel.html",
            "relUrl": "/keylearnings/2022/08/29/alumnipanel.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Java Primitives Notebook",
            "content": "Define in a Class the following data types | Demonstrate use of Primitives: int, double, boolean, string | Demonstrate use of Wrapper Class object: String | Describe in comments how each data type choice is appropriate to application | Perform arithmetic expressions and assignment in a program code Code.org Lesson | Determine what is result is in a variable as a result of an data type and expression (ie integer vs double) | Perform an arithmetic expressions that uses casting, add comments that show how it produces desired result. Learn more by watching this College Board video | Perform compound assignment operator (ie +=), add comments to describe the result of operator | . Code below, Collaborated with Don Tran . import java.util.Scanner; public class Kitkatwrapper{ public static void main(String[] args) { Scanner myObj = new Scanner(System.in); // Create a Scanner object System.out.println(&quot;Enter a salary between 0-1,000,000&quot;); // Number 1, gets salary double salary = myObj.nextDouble(); // Read user input System.out.println(salary); double oldSalary = salary; // records oldsalary for percent calculation later System.out.println(&quot;Enter your pay raise&quot;); // Number 2, gets raise to salary double raise = myObj.nextDouble(); // Read user input System.out.println(raise); salary += raise; // the inputted number of &quot;raise&quot; is added onto the original inputted &quot;salary&quot; int percent = (int) (100*(salary / oldSalary)-100); // calculates percent raise myObj.close(); // closing object, stops reading text inputs boolean payraisequality; // defines boolean variable String message; // defines message if(percent &gt; 5){ payraisequality = true; } else{ payraisequality = false; } if (payraisequality == true){ message = &quot;You got a good pay raise!&quot;; } else{ message = &quot;You got a bad pay raise.&quot;; } System.out.println(&quot;Your final salary is: &quot; + salary + &quot;, which is around a &quot; + percent + &quot;% raise from your original salary. &quot; + message); // Output user input } } Kitkatwrapper.main(null); . Enter a salary between 0-1,000,000 123123.0 Enter your pay raise 123123.0 Your final salary is: 246246.0, which is around a 100% raise from your original salary. You got a good pay raise! .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/keylearnings/2022/08/22/javaclasses.html",
            "relUrl": "/keylearnings/2022/08/22/javaclasses.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "TT 1.0 Tools and Equipment",
            "content": "TT 1.0 Hacks . PART 1 LINKS: . Personal Fastpage . Markdown Page STILL NEED TO DO . Python Notebook . Java Notebook . . PART 2 LINKS : . Link to Commit . . Link to Issue .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/markdown/2022/08/21/markdownpg.html",
            "relUrl": "/markdown/2022/08/21/markdownpg.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Python Notebook",
            "content": "print(&quot;hello&quot;) . hello .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/codecodecode/2022/08/20/python.html",
            "relUrl": "/codecodecode/2022/08/20/python.html",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Java Notebook",
            "content": "System.out.println(&quot;Hello&quot;); int a = 3; int b = 10; double c = 2.5; c = 2 * a - 15 / b + c; System.out.println(c); . Hello 1.0 .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/codecodecode/2022/08/20/java.html",
            "relUrl": "/codecodecode/2022/08/20/java.html",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "Lesson on Writing Classes",
            "content": "",
            "url": "https://prorichyman.github.io/CSA-Fastpages/keylearnings/2020/10/03/writingclasseslesson.html",
            "relUrl": "/keylearnings/2020/10/03/writingclasseslesson.html",
            "date": " • Oct 3, 2020"
        }
        
    
  
    
        ,"post43": {
            "title": "WORKING!!!!!!! Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://prorichyman.github.io/CSA-Fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post44": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://prorichyman.github.io/CSA-Fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://prorichyman.github.io/CSA-Fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  
  

  
      ,"page13": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://prorichyman.github.io/CSA-Fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}